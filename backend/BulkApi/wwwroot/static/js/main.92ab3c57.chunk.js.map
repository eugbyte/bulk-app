{"version":3,"sources":["images/e_commerce.png","../node_modules/jspdf/dist sync","store/actionEnums.ts","store/actions/errorAction.ts","services/InterceptorService.ts","store/thunks/discountSchemeThunk.ts","components/CardComponent.tsx","components/ErrorNotification.tsx","containers/DiscountSchemesPage.tsx","models/AuthVM.ts","enums/Claims.tsx","components/NavBar.tsx","store/thunks/authThunk.ts","models/DiscountScheme.ts","components/CartButtons.tsx","models/Bid.ts","store/thunks/bidThunk.ts","components/SnackbarComponent.tsx","components/SelectComponents.tsx","models/SelectListItem.ts","components/TextComponent.tsx","containers/DiscountSchemeDetailPage.tsx","containers/DiscountSchemeDetailHOC.tsx","components/DataTable.tsx","components/OrderCheckoutComponent.tsx","containers/CartPage.tsx","containers/OrdersPage.tsx","models/Product.ts","components/DialogComponent.tsx","containers/ProducerDiscountSchemePage.tsx","store/thunks/productThunk.ts","components/DatePickerComponent.tsx","containers/DiscountSchemeForm.tsx","containers/ProductForm.tsx","components/TextFieldComponents.tsx","containers/ProductsPage.tsx","models/IdentityUser.ts","containers/LoginForm.tsx","containers/ErrorPage.tsx","components/PrivateRoute.tsx","App.tsx","serviceWorker.ts","store/reducers/discountSchemeReducer.ts","store/reducers/bidReducer.ts","store/reducers/productReducer.ts","store/reducers/errorReducer.ts","store/reducers/authReducer.ts","store/rootReducer.ts","index.tsx"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","ACTIONS","errorAction","type","error","InterceptorService","jwt","JSON","parse","localStorage","getItem","header","Headers","append","console","log","getDiscountSchemesWithBidOfProducer","producerId","dispatch","a","GET_DISCOUNTSCHEME_OF_PRODUCER_REQUEST","message","fetch","headers","getAuthHeader","response","ok","json","discountSchemes","GET_DISCOUNTSCHEME_OF_PRODUCER_RECEIVED","httpMessage","HTTP_READ_SUCCESS","ERROR","CardComponent","title","paras","actionTitle","action","classes","useStyles","Card","className","cardWidth","CardActionArea","onClick","CardMedia","component","height","cardHeight","image","CardContent","Typography","gutterBottom","variant","CardActions","Button","size","color","makeStyles","theme","createStyles","backdrop","zIndex","drawer","maxWidth","ErrorNotification","autoHideDuration","useDispatch","useState","openAlert","setOpenAlert","handleCloseAlert","cleanUpErrorAction","CLEAR_ERROR","useEffect","Snackbar","open","onClose","severity","Alert","props","elevation","DiscountSchemesPage","history","useHistory","useSelector","discountSchemeReducer","errorReducer","document","getJWT","GET_DISCOUNTSCHEMES_REQUEST","GET_DISCOUNTSCHEMES_RECEIVED","cards","index","ds","dateString","expiryDate","Date","toString","toDateString","product","name","currentBids","bids","filter","bid","isInCart","reduce","accum","quantity","textDict","discountedPrice","minOrderQnty","Object","entries","key","value","para","align","originalPrice","push","card","Grid","item","xs","sm","lg","discountSchemeId","length","fullWidth","container","spacing","Claims","typo","fontVariant","width","margin","paddingLeft","paddingRight","CLAIMS","AuthVM","userName","isAuthenticated","email","claims","this","NavBar","authVM","authReducer","logoutMessage","LOGOUT_SUCCESS","Navbar","expand","blueBg","Brand","to","navLink","Toggle","aria-controls","Collapse","Nav","includes","CONSUMER","PRODUCER","DropdownButton","alignRight","NavDropdown","Item","Link","as","NavLink","LOGOUT","logoutSync","style","textDecoration","backgroundColor","dropDownLink","DiscountScheme","deliveryCharge","productId","addressBidCountDict","CartButtons","setQuantity","ButtonGroup","aria-label","alignLeft","display","flexDirection","alignItems","alignCenter","Bid","bidId","bidSuccessDate","collectionAddress","discountScheme","customerId","currentTotalBids","updateBidInCartAsync","UPDATE_BID_IN_CART_REQUEST","messages","method","body","stringify","updatedBid","UPDATE_BID_IN_CART_RECEIVED","statusText","HTTP_UPDATE_SUCCESS","SnackbarComponent","setOpen","cleanUp","handleClose","reason","SelectControlledComponent","state","selectListItems","handleChange","isError","formHelperText","FormControl","formControl","InputLabel","Select","labelId","autoWidth","onChange","event","MenuItem","undefined","divider","map","selectListItem","text","FormHelperText","minWidth","selectEmpty","marginTop","SelectListItem","disabled","selected","TextComponent","Container","DiscountSchemeDetailPage","MODE","bidIdToUpdate","GET_DISCOUNTSCHEME_REQUEST","GET_DISCOUNTSCHEME_RECEIVED","getDiscountSchemeAsync","address","setAddress","numBidsAtAddress","avgDeliveryCharge","leftExpiryDateDict","rightDescriptionDict","description","leftPriceDict","rightPriceDict","leftQuantityDict","rightQuantityDict","addressTextDict","avgDeliveryChargeDict","e_commerce","selectedAddress","target","ADD_BID_TO_CART_REQUEST","createdBid","ADD_BID_TO_CART_RECEIVED","HTTP_CREATE_SUCCESS","addBidToCartAsync","DiscountSchemeDetailHOC","routeParams","useParams","parseInt","DataTable","data","columnNames","accessors","handleChecked","idColumnAccessorName","pageSize","actionIcon","enablePaging","enableSearch","actionMessage","enableSelection","detailPanelFieldName","enabledDetailPanel","headerDicts","i","accessor","headerDict","icons","tableIcons","columns","options","selection","search","paging","rowStyle","detailPanel","rowData","icon","displayNone","render","detailPanelFielddName","returnDetailTable","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","AddShoppingCartIcon","OrderCheckoutComponent","rowIds","handleOrder","selectedBids","totalDeliveryCharge","charge","totalPrice","totalQuantity","Paper","paragraph","alignContent","Row","checkbox","updateCartComponent","deleteButton","CartPage","notificationMessage","setNotificationMessage","handleNotification","isOpen","bidsInCart","bidReducer","setBids","cloneDeep","GET_BIDSOFCUSTOMER_INCART_REQUEST","GET_BIDSOFCUSTOMER_INCART_RECEIVED","getBidsOfCustomerInCartAsync","selectedRowBidIds","setSelectedRowBidIds","apiMessage","HTTP_DELETE_SUCCESS","HTTP_UPDATE_ORDER_SUCCESS","rows","row","borderBottom","fontSize","createRowFromBid","handleUpdateCart","newQuantity","bidsCopy","bidCopy","updateAction","Checkbox","newSelectedRowIds","deleteAction","DELETE_BID_IN_CART_REQUEST","DELETE_BID_IN_CART_RECEIVED","deleteBidFromCartAsync","newBids","descriptionDict","quantityDict","deliveryDict","ORDER_BIDS_IN_CART_REQUEST","ORDER_BIDS_IN_CART_RECEIVED","orderBidsFromCart","remainingBidsRequired","bidExpiryDate","bidStatus","OrdersPage","GET_PENDING_OR_SUCCESSFUL_BIDS_REQUEST","GET_PENDING_OR_SUCCESSFUL_BIDS_RECEIVED","getPendingOrSuccessfulBids","Product","category","DialogComponent","toggleOpen","content","showPicture","secondaryActionTitle","secondaryAction","Dialog","aria-labelledby","DialogTitle","DialogContent","imageUrl","DialogActions","delete","ProducerDiscountSchemePage","immutableDiscountSchemes","products","uniqBy","setDiscountSchemes","status","setStatus","productName","setProductName","discountSchemesCopy","determineStatusOfScheme","toLowerCase","openProductDialog","setOpenProductDialog","setProduct","productTextDict","productTextComponent","openDeleteDialog","setOpenDeleteDialog","targetDiscountScheme","setTargetDiscountScheme","httpResponseMessage","createRowFromScheme","isDisableDelete","tooltipMessage","find","selectedStatus","Autocomplete","getOptionLabel","option","onInputChange","renderInput","params","TextField","label","DELETE_DISCOUNTSCHEME_REQUEST","deletedDiscountScheme","DELETE_DISCOUNTSCHEME_RECEIVED","isSchemeSuccess","some","hasBidExpired","getProductsAsync","GET_PRODUCTS_REQUEST","GET_PRODUCTS_RECEIVED","DatePickerUncontrolledComponent","control","errors","defaultValue","errorMessage","rules","helperText","DatePickerControlledComponent","utils","DateFnsUtils","disableToolbar","format","guid","KeyboardButtonProps","FORM_NAMES","TextFieldUncontrolledComponent","isFullWidth","adornment","InputProps","startAdornment","InputAdornment","position","DiscountSchemeForm","productReducer","useForm","handleSubmit","getValues","watchProductId","watch","selectedProduct","onSubmit","CREATE_DISCOUNTSCHEME_REQUEST","createdDiscountScheme","CREATE_DISCOUNTSCHEME_RECEIVED","createDiscountSchemeAsync","createDiscountScheme","justify","textAlign","bottom","EmptyGridRow","required","min","ProductForm","mode","productToUpdate","GET_PRODUCT_REQUEST","GET_PRODUCT_RECEIVED","getProductAsync","reset","setValue","openSnackbar","setOpenSnackbar","initializeProduct","apiError","createdProduct","createProductsAsync","UPDATE_PRODUCT_REQUEST","updatedProduct","updateProductAsync","GridRow","update","ProductsPage","targetProduct","setTargetProduct","createRow","DELETE_PRODUCT_REQUEST","deletedProduct","DELETE_PRODUCT_RECEIVED","IdentityUser","passwordHash","LoginForm","openSnackBar","setOpenSnackBar","defaultAuthVM","identityUser","LOGIN_REQUEST","LOGIN_FAILED","LOGIN_SUCCESS","loginAsync","ErrorPage","PrivateRoute","path","requiredClaims","isAuthorized","every","requiredClaim","linkToLoginForm","App","exact","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","prevState","newState","CREATE_PRODUCT_REQUEST","CREATE_PRODUCT_RECEIVED","UPDATE_PRODUCT_RECEIVED","setItem","removeItem","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.92ab3c57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/e_commerce.3acf207a.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 384;","export enum ACTIONS { \r\n    GET_DISCOUNTSCHEMES_REQUEST = \"GET_DISCOUNTSCHEMES_REQUEST\",\r\n    GET_DISCOUNTSCHEMES_RECEIVED = \"GET_DISCOUNTSCHEMES_RECEIVED\",\r\n\r\n    GET_DISCOUNTSCHEME_REQUEST = \"GET_DISCOUNTSCHEME_REQUEST\",\r\n    GET_DISCOUNTSCHEME_RECEIVED = \"GET_DISCOUNTSCHEME_RECEIVED\",\r\n\r\n    GET_DISCOUNTSCHEME_OF_PRODUCER_REQUEST = \"GET_DISCOUNTSCHEME_OF_PRODUCER_REQUEST\",\r\n    GET_DISCOUNTSCHEME_OF_PRODUCER_RECEIVED = \"GET_DISCOUNTSCHEME_OF_PRODUCER_RECEIVED\",\r\n\r\n    CREATE_DISCOUNTSCHEME_REQUEST = \"CREATE_DISCOUNTSCHEME_REQUEST\",\r\n    CREATE_DISCOUNTSCHEME_RECEIVED = \"CREATE_DISCOUNTSCHEME_RECEIVED\",\r\n\r\n    DELETE_DISCOUNTSCHEME_REQUEST = \"DELETE_DISCOUNTSCHEME_REQUEST\",\r\n    DELETE_DISCOUNTSCHEME_RECEIVED = \"DELETE_DISCOUNTSCHEME_RECEIVED\",\r\n\r\n    GET_BIDSOFCUSTOMER_INCART_REQUEST = \"GET_BIDSOFCUSTOMER_INCART_REQUEST\",\r\n    GET_BIDSOFCUSTOMER_INCART_RECEIVED = \"GET_BIDSOFCUSTOMER_INCART_RECEIVED\",\r\n\r\n    ADD_BID_TO_CART_REQUEST = \"ADD_BID_TO_CART_REQUEST\",\r\n    ADD_BID_TO_CART_RECEIVED = \"ADD_BID_TO_CART_RECEIVED\",\r\n\r\n    UPDATE_BID_IN_CART_REQUEST = \"UPDATE_BID_IN_CART_REQUEST\",\r\n    UPDATE_BID_IN_CART_RECEIVED = \"UPDATE_BID_IN_CART_RECEIVED\",\r\n\r\n    DELETE_BID_IN_CART_REQUEST = \"DELETE_BID_IN_CART_REQUEST\",\r\n    DELETE_BID_IN_CART_RECEIVED = \"DELETE_BID_IN_CART_RECEIVED\",\r\n\r\n    ERROR = \"ERROR\",\r\n    CLEAR_ERROR = \"CLEAR_ERROR\",\r\n\r\n    ORDER_BIDS_IN_CART_REQUEST = \"ORDER_BIDS_IN_CART_REQUEST\",\r\n    ORDER_BIDS_IN_CART_RECEIVED = \"ORDER_BIDS_IN_CART_RECEIVED\",\r\n\r\n    GET_PRODUCTS_REQUEST = \"GET_PRODUCTS_REQUEST\",\r\n    GET_PRODUCTS_RECEIVED = \"GET_PRODUCTS_RECEIVED\",\r\n\r\n    GET_PRODUCT_REQUEST = \"GET_PRODUCT_REQUEST\",\r\n    GET_PRODUCT_RECEIVED = \"GET_PRODUCT_RECEIVED\",\r\n\r\n\r\n    GET_PENDING_OR_SUCCESSFUL_BIDS_REQUEST = \"GET_PENDING_OR_SUCCESSFUL_BIDS_REQUEST\",\r\n    GET_PENDING_OR_SUCCESSFUL_BIDS_RECEIVED = \"GET_PENDING_OR_SUCCESSFUL_BIDS_RECEIVED\",\r\n\r\n    CREATE_PRODUCT_REQUEST = \"CREATE_PRODUCT_REQUEST\",\r\n    CREATE_PRODUCT_RECEIVED = \"CREATE_PRODUCT_RECEIVED\",\r\n\r\n    DELETE_PRODUCT_REQUEST = \"DELETE_PRODUCT_REQUEST\",\r\n    DELETE_PRODUCT_RECEIVED = \"DELETE_PRODUCT_RECEIVED\",\r\n\r\n    UPDATE_PRODUCT_REQUEST = \"UPDATE_PRODUCT_REQUEST\",\r\n    UPDATE_PRODUCT_RECEIVED = \"UPDATE_PRODUCT_RECEIVED\",\r\n\r\n    LOGIN_REQUEST = \"LOGIN_REQUEST\",\r\n    LOGIN_SUCCESS = \"LOGIN_SUCCESS\",\r\n    LOGIN_FAILED = \"LOGIN_FAILED\",\r\n\r\n    LOGOUT = \"LOGOUT\",\r\n    LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\",\r\n\r\n    HTTP_UPDATE_SUCCESS = \"HTTP_UPDATE_SUCCESS\",\r\n    HTTP_READ_SUCCESS = \"HTTP_READ_SUCCESS\",\r\n    HTTP_CREATE_SUCCESS = \"HTTP_CREATE_SUCCESS\",\r\n    HTTP_DELETE_SUCCESS = \"HTTP_DELETE_SUCCESS\",\r\n\r\n    HTTP_UPDATE_ORDER_SUCCESS = \"HTTP_UPDATE_ORDER_SUCCESS\"\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Action } from \"redux\";\r\nimport { ApiError } from \"../../models/ApiError\";\r\nimport { ErrorCollection } from \"../../models/ErrorCollection\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\n\r\nexport interface IErrorAction extends Action {\r\n    type: string;\r\n    error: ApiError | Error | ErrorCollection | null;\r\n}\r\n \r\nexport function errorAction(type: string, error: ApiError | Error | ErrorCollection): IErrorAction {\r\n    return {\r\n        type: type,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport function cleanErrors(): IErrorAction {\r\n    return {\r\n        type: ACTIONS.CLEAR_ERROR,\r\n        error: null\r\n    }\r\n}","import { AuthVM } from \"../models/AuthVM\";\r\n\r\nexport class InterceptorService {\r\n\r\n    static getAuthHeader(): Headers | undefined {\r\n        try {\r\n            const authVM: AuthVM = JSON.parse(localStorage.getItem(\"authVM\") as string);\r\n            let jwt: string = authVM.jwt;\r\n            let header = new Headers();\r\n            header.append(\"Authorization\", `Bearer ${jwt}`);\r\n            header.append(\"Content-Type\", \"application/json\");\r\n           \r\n            return header;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    static getJWT(): string {\r\n        if (!localStorage.getItem(\"authVM\") ) {\r\n           return \"\";\r\n        }\r\n        const authVM: AuthVM = JSON.parse(localStorage.getItem(\"authVM\") as string);\r\n        let jwt: string = authVM.jwt;\r\n        return `Bearer ${jwt}`;\r\n    }\r\n}","import { ACTIONS } from \"../actionEnums\";\r\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\r\nimport { DiscountScheme } from \"../../models/DiscountScheme\";\r\nimport { Action } from \"redux\";\r\nimport { IErrorAction, errorAction } from \"../actions/errorAction\";\r\nimport { ApiError } from \"../../models/ApiError\";\r\nimport { InterceptorService } from \"../../services/InterceptorService\";\r\n\r\nexport interface IDiscountSchemeAction extends Action {\r\n    type: string;\r\n    discountSchemes?: DiscountScheme[] | null;\r\n    discountScheme?: DiscountScheme | null;\r\n    message?: string;\r\n    httpMessage?: string;\r\n}\r\n\r\n\r\nexport function getAllDiscountSchemesWithBidsAsync(): ThunkAction<Promise<void>, {}, {}, IDiscountSchemeAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IDiscountSchemeAction | IErrorAction> ) => {\r\n        console.log(\"JWT\", InterceptorService.getJWT());\r\n        dispatch({ type: ACTIONS.GET_DISCOUNTSCHEMES_REQUEST, message: \"GET DiscountSchemes...\"});\r\n        try {            \r\n            \r\n            const response: Response = await fetch(\"https://localhost:44397/api/discountSchemes\", {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n\r\n            const discountSchemes: DiscountScheme[] = await response.json();\r\n            dispatch({ type: ACTIONS.GET_DISCOUNTSCHEMES_RECEIVED, discountSchemes: discountSchemes, httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch (error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport function getDiscountSchemeAsync(discountSchemeId: number): ThunkAction<Promise<void>, {}, {}, IDiscountSchemeAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IDiscountSchemeAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.GET_DISCOUNTSCHEME_REQUEST, message: \"GET DiscountScheme with id: \" + discountSchemeId});\r\n        try {            \r\n            const response: Response = await fetch(\"https://localhost:44397/api/discountSchemes/\" + discountSchemeId, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            const discountScheme: DiscountScheme = await response.json();\r\n            dispatch({ type: ACTIONS.GET_DISCOUNTSCHEME_RECEIVED, discountScheme: discountScheme, httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport function getDiscountSchemesWithBidOfProducer(producerId: number): ThunkAction<Promise<void>, {}, {}, IDiscountSchemeAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IDiscountSchemeAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.GET_DISCOUNTSCHEME_OF_PRODUCER_REQUEST, message: \"GET DiscountScheme of producer id: \" + producerId });\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/discountSchemes/producer/\" + producerId, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            const discountSchemes: DiscountScheme[] = await response.json();\r\n            dispatch({ type: ACTIONS.GET_DISCOUNTSCHEME_OF_PRODUCER_RECEIVED, discountSchemes: discountSchemes, httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function createDiscountSchemeAsync(discountScheme: DiscountScheme): ThunkAction<Promise<void>, {}, {}, IDiscountSchemeAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IDiscountSchemeAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.CREATE_DISCOUNTSCHEME_REQUEST, message: \"Creating Discount Scheme\" });\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/discountSchemes\", {\r\n                method: \"POST\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(discountScheme)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            const createdDiscountScheme: DiscountScheme = await response.json();\r\n            dispatch({ type: ACTIONS.CREATE_DISCOUNTSCHEME_RECEIVED, discountScheme: createdDiscountScheme, httpMessage: ACTIONS.HTTP_CREATE_SUCCESS });\r\n\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function deleteDiscountSchemeAsync(discountSchemeId: number): ThunkAction<Promise<void>, {}, {}, IDiscountSchemeAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IDiscountSchemeAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.DELETE_DISCOUNTSCHEME_REQUEST, message: \"Deleting Discount Scheme\" });\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/discountSchemes/\" + discountSchemeId, {\r\n                method: \"DELETE\",\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            const deletedDiscountScheme: DiscountScheme = await response.json();\r\n            dispatch({ type: ACTIONS.DELETE_DISCOUNTSCHEME_RECEIVED, discountScheme: deletedDiscountScheme, httpMessage: ACTIONS.HTTP_DELETE_SUCCESS });\r\n\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport { CardContent, Button, CardActions } from \"@material-ui/core\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n\r\ninterface IProp {\r\n    title: string,\r\n    paras: JSX.Element[] | JSX.Element, // e.g. [<p></p>, <p><p>]\r\n    actionTitle?: string,\r\n    action?: (val: any) => any;\r\n}\r\n\r\nexport function CardComponent({title, paras, actionTitle, action}: IProp) {\r\n    const classes = useStyles(); \r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.cardWidth}>\r\n                <CardActionArea onClick={action}>\r\n                    <CardMedia \r\n                        component=\"img\"\r\n                        height=\"140\"\r\n                        className={classes.cardHeight}\r\n                        image=\"e_commerce.png\"\r\n                        title=\"https://acowebs.com/impact-ecommerce-society/\"/>\r\n                </CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {title}\r\n                    </Typography>\r\n                    {paras}\r\n                </CardContent>\r\n                { action != null &&\r\n                    <CardActions>                \r\n                        <Button size=\"medium\" color=\"primary\" onClick={action}>\r\n                            {actionTitle}\r\n                        </Button>\r\n                    </CardActions>  \r\n                }\r\n                  \r\n            </Card>\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: \"#fff\"\r\n    },\r\n    cardWidth: {\r\n        maxWidth: 450,\r\n    },\r\n    cardHeight: {\r\n        height: 140,\r\n    },\r\n  })\r\n);","import React, { useEffect, useState } from \"react\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { ApiError } from \"../models/ApiError\";\r\nimport { errorAction } from \"../store/actions/errorAction\";\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { ErrorCollection } from \"../models/ErrorCollection\";\r\n\r\ninterface IProp {\r\n    autoHideDuration?: number;\r\n    error: ApiError | Error | ErrorCollection | null,\r\n    message: string\r\n}\r\n\r\n// Stateful component\r\n// Parent component does not need to hold the showAlert in its state\r\nexport function ErrorNotification({error, autoHideDuration=6000, message}: IProp): JSX.Element {\r\n    // API Errors received if any\r\n    // To display error notification\r\n    const dispatch: Dispatch<any> = useDispatch(); \r\n    const [openAlert, setOpenAlert] = useState<boolean>(false); \r\n    const handleCloseAlert = () => {\r\n        setOpenAlert(false);\r\n        const cleanUpErrorAction = errorAction(ACTIONS.CLEAR_ERROR, error as ApiError | Error | ErrorCollection );\r\n        dispatch(cleanUpErrorAction);\r\n    }\r\n\r\n    useEffect(()=> {\r\n        if (error) {\r\n            setOpenAlert(true);\r\n        }\r\n    }, [error]);\r\n    return <Snackbar open={openAlert} autoHideDuration={autoHideDuration} onClose={handleCloseAlert}>\r\n    <Alert severity=\"error\" onClose={handleCloseAlert}>{message}</Alert>\r\n</Snackbar>\r\n}\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }","import React, { useEffect } from \"react\";\r\nimport { Dispatch } from \"redux\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAllDiscountSchemesWithBidsAsync } from \"../store/thunks/discountSchemeThunk\";\r\nimport { DiscountScheme } from \"../models/DiscountScheme\"; \r\nimport { RootState } from \"../store/rootReducer\"; \r\nimport Grid from '@material-ui/core/Grid';\r\nimport { CardComponent } from \"../components/CardComponent\"; \r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { ApiError } from \"../models/ApiError\";\r\nimport { ErrorNotification } from \"../components/ErrorNotification\";\r\nimport { InterceptorService } from \"../services/InterceptorService\";\r\n \r\nexport function DiscountSchemesPage(): JSX.Element {\r\n    const dispatch: Dispatch<any> = useDispatch();  \r\n    const history = useHistory();   \r\n    const classes = useStyles();\r\n\r\n    let discountSchemes: DiscountScheme[] = useSelector((action: RootState) => action.discountSchemeReducer.discountSchemes as DiscountScheme[]) ?? []; \r\n    console.log(discountSchemes);\r\n\r\n    const error: ApiError = useSelector((action: RootState) => action.errorReducer.error as ApiError) ?? null;\r\n\r\n    useEffect(() => {\r\n        document.title = \"Products\"\r\n        let action = getAllDiscountSchemesWithBidsAsync();\r\n        dispatch(action)\r\n    }, []); \r\n\r\n    let cards: JSX.Element[] = []\r\n    for (let index = 0; index < discountSchemes.length; index ++ ) {\r\n        const ds = discountSchemes[index];\r\n\r\n        let dateString: string = \"\";\r\n        if (ds.expiryDate) {\r\n            let date: Date = new Date(ds.expiryDate.toString());\r\n            dateString = date.toDateString();\r\n        } \r\n\r\n        let title = ds.product?.name ?? \"\";\r\n        let currentBids: number = ds.bids\r\n            .filter(bid => !bid.isInCart)\r\n            .reduce((accum, bid) => accum + bid?.quantity, 0);\r\n\r\n        let textDict = {\r\n            \"Title\": title,\r\n            \"Discounted Price\": \"$\" + ds.discountedPrice,\r\n            \"Remaining Bids Needed\": ds.minOrderQnty - currentBids,\r\n            \"Expiry Date\": dateString\r\n        } \r\n\r\n        let paras: JSX.Element[] = [];\r\n        for (let [key, value] of Object.entries(textDict)) {\r\n            let para: JSX.Element = <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"left\" key={key}>\r\n                <b>{key}&nbsp;</b>{value} \r\n            </Typography>\r\n\r\n            if (key === \"Discounted Price\") {\r\n                para = <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"left\" key={key}>\r\n                <b>{key}&nbsp;</b> ${ds.discountedPrice} $<del>{ds.product?.originalPrice}</del>\r\n            </Typography>\r\n            }\r\n\r\n            paras.push(para)\r\n        }\r\n                 \r\n        const redirectToDiscountSchemeDetail = () => { history.push(\"/discountScheme/\" + ds.discountSchemeId) };\r\n\r\n        let card: JSX.Element = <Grid item xs={12} sm={4} lg={3} key={index}>\r\n            <CardComponent title={title} paras={paras} actionTitle={\"Add to Cart\"} action={redirectToDiscountSchemeDetail}/>\r\n        </Grid>\r\n        cards.push(card);\r\n    }  \r\n\r\n    return <div>\r\n        {discountSchemes.length > 0 &&\r\n            <Grid className={classes.fullWidth}\r\n                container\r\n                spacing={3}>\r\n                {cards}\r\n            </Grid>     \r\n        }\r\n        <ErrorNotification error={error} message=\"error fetching schemes\" />\r\n    </div>\r\n\r\n} \r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    typo: {\r\n       fontVariant: \"body2\",\r\n       color: \"textSecondary\",\r\n       component: \"p\",\r\n       align: \"left\"\r\n    },\r\n    fullWidth: {\r\n        width: \"100vw\",\r\n        margin: \"auto\",\r\n        paddingLeft: \"100px\",\r\n        paddingRight: \"100px\"\r\n    }\r\n  })\r\n);","export enum Claims {\r\n    PRODUCER = \"PRODUCER\",\r\n    CONSUMER = \"CONSUMER\",\r\n}\r\n\r\n\r\nexport class AuthVM {\r\n    jwt: string = \"\";\r\n    isAuthenticated: boolean | \"UNTOUCHED\" = false;\r\n    id: string = \"\";\r\n    userName: string = \"\";\r\n    email: string = \"\";\r\n    claims: string[] = []\r\n\r\n    constructor(userName=\"\") {\r\n        this.userName = userName;\r\n    }\r\n}\r\n","export enum CLAIMS {\r\n    PRODUCER = \"PRODUCER\",\r\n    CONSUMER = \"CONSUMER\"\r\n}","import React, { Dispatch, Fragment, useContext, useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'; \r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { Navbar, Nav, NavDropdown, DropdownButton } from 'react-bootstrap';\r\nimport \"./NavBar.css\";\r\nimport { AuthVM } from '../models/AuthVM';\r\nimport { CLAIMS } from '../enums/Claims';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/rootReducer';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { logoutSync } from '../store/thunks/authThunk';\r\nimport { ACTIONS } from '../store/actionEnums';\r\n\r\n\r\nexport function NavBar() {\r\n  \r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const dispatch: Dispatch<any> = useDispatch(); \r\n\r\n  let authVM: AuthVM = useSelector((action: RootState) => action.authReducer.authVM) ?? new AuthVM(\"ACCOUNT\");\r\n\r\n  let logoutMessage: string = useSelector((action: RootState) => action.authReducer.message) ?? \"\";\r\n\r\n  // When user refresh window, reducer state resets\r\n  // Retrieve again from localstorage\r\n  if (localStorage.getItem(\"authVM\")) {\r\n    authVM = JSON.parse( localStorage.getItem(\"authVM\") as string );\r\n  } \r\n\r\n  const logout = () => {\r\n    const action = logoutSync();\r\n    dispatch(action);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (logoutMessage === ACTIONS.LOGOUT_SUCCESS) {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [logoutMessage])\r\n\r\n  return (\r\n    <div>\r\n      <Navbar expand=\"lg\" variant=\"dark\" className={classes.blueBg}>\r\n          <Navbar.Brand><NavLink to=\"/\" className={classes.navLink} >BulkApi</NavLink></Navbar.Brand>\r\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n          <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n\r\n                {/* Consumer NavBar */}\r\n                { authVM.claims?.includes(CLAIMS.CONSUMER) &&\r\n\r\n                  <Fragment>\r\n                    <Button color=\"inherit\" ><NavLink to=\"/\" className={classes.navLink} >Products</NavLink></Button>\r\n                    <Button color=\"inherit\"><NavLink to=\"/cart\" className={classes.navLink}>Cart</NavLink></Button>\r\n                    <Button color=\"inherit\"><NavLink to=\"/orders\" className={classes.navLink}>Orders</NavLink></Button>\r\n                  </Fragment>\r\n                }\r\n              \r\n                {/* Producer NavBar */}\r\n                { authVM.claims?.includes(CLAIMS.PRODUCER) &&\r\n                  <Fragment>\r\n                    <Button color=\"inherit\"><NavLink to=\"/producer/discountSchemes\" className={classes.navLink} >Schemes</NavLink></Button>\r\n                    <Button color=\"inherit\"><NavLink to=\"/producer/products\" className={classes.navLink} >Products</NavLink></Button>                    \r\n                  </Fragment>\r\n                }\r\n                \r\n              </Nav>\r\n\r\n              {/* Authentication DropDown */}\r\n              <DropdownButton alignRight title={authVM.userName}>\r\n              { authVM.isAuthenticated\r\n                ? <NavDropdown.Item >\r\n                    <Nav.Link as={NavLink} onClick={logout} to=\"/login\" style={{color: \"black\"}}>LOGOUT</Nav.Link>\r\n                  </NavDropdown.Item> \r\n                : <NavDropdown.Item >\r\n                  <Nav.Link as={NavLink} to=\"/login\" style={{color: \"black\"}}>LOGIN</Nav.Link>\r\n                </NavDropdown.Item> \r\n              }\r\n              </DropdownButton>\r\n                  \r\n                       \r\n                \r\n          </Navbar.Collapse>\r\n          \r\n      </Navbar>\r\n      <br/>\r\n    </div>\r\n  );\r\n}\r\n \r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    navLink: {\r\n        color: \"white\",\r\n        textDecoration: \"inherit\",        \r\n    },\r\n    blueBg: {\r\n      backgroundColor: \"#3f51b5\",\r\n      textDecoration: \"inherit\", \r\n    },\r\n    dropDownLink: {\r\n      color: \"black\",\r\n      textDecoration: \"inherit\",\r\n    }\r\n  }),\r\n);\r\n","import { ThunkAction, ThunkDispatch } from \"@reduxjs/toolkit\";\r\nimport { Action } from \"redux\";\r\nimport { ApiError } from \"../../models/ApiError\";\r\nimport { AuthVM } from \"../../models/AuthVM\";\r\nimport { IdentityUser } from \"../../models/IdentityUser\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\nimport { errorAction, IErrorAction } from \"../actions/errorAction\";\r\n\r\nexport interface IAuthAction extends Action {\r\n    type: string;\r\n    identityUser?: IdentityUser | undefined;\r\n    message?: string; // All internal messages and for response messages received on GET request \r\n    authVM?: AuthVM;\r\n    httpMessage?: string; // For API messages\r\n\r\n}\r\n\r\n export function loginAsync(identityUser: IdentityUser): ThunkAction<Promise<void>, {}, {}, IAuthAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IAuthAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.LOGIN_REQUEST, message: \"Attempting login...\"});\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/auth/signIn\", {\r\n                method: \"POST\",\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(identityUser)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            // If authentication succeeds, server sends authVM. Otherwise, AuthenticationException raised\r\n            let authVM: AuthVM = await response.json();\r\n            console.log(\"IAuthVM\", authVM);\r\n\r\n            if (authVM.isAuthenticated === false) {\r\n                authVM.userName = \"ACCOUNT\";\r\n                dispatch({ type: ACTIONS.LOGIN_FAILED,\r\n                    authVM: authVM,\r\n                    message: response.statusText,  \r\n                    httpMessage: ACTIONS.HTTP_UPDATE_SUCCESS \r\n                });\r\n              return;\r\n            }\r\n\r\n            dispatch({ type: ACTIONS.LOGIN_SUCCESS, \r\n                authVM: authVM,\r\n                message: response.statusText,  \r\n                httpMessage: ACTIONS.HTTP_UPDATE_SUCCESS \r\n            });\r\n        } catch(error) {          \r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function logoutSync(): IAuthAction {\r\n    let authVM: AuthVM = new AuthVM(\"ACCOUNT\");\r\n    authVM.isAuthenticated = \"UNTOUCHED\";\r\n    return { type: ACTIONS.LOGOUT, message: \"Logout ...\", authVM: authVM}; \r\n}\r\n","import { Product } from \"./Product\";\r\nimport { Bid } from \"./Bid\";\r\n\r\nexport class DiscountScheme {\r\n    discountSchemeId: number = 0;\r\n    minOrderQnty: number = 0;\r\n    discountedPrice: number = 0;\r\n    expiryDate: Date | null = null;\r\n    deliveryCharge: number = 0;\r\n\r\n    productId: number = 0;\r\n    product: Product | null = null;\r\n    bids: Bid[] = [];\r\n\r\n    //Properties of ViewModel\r\n    addressBidCountDict?: Record<string, number> = {}\r\n\r\n}","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\n\r\ninterface IProp {\r\n    quantity: number; // quantity is part of useState(0)\r\n    setQuantity: (num: number) => any;  // setQuantity is part of useState(0)\r\n    size?: \"small\" | \"medium\" | \"large\"\r\n    align?: \"alignLeft\" | \"alignCenter\" | \"alignRight\"\r\n}\r\n\r\nexport function CartButtons({quantity, setQuantity, size=\"medium\", align=\"alignLeft\"}: IProp): JSX.Element {\r\n    const classes: Record<string, any> = useStyles();\r\n\r\n    const handleIncrement = () => {\r\n        setQuantity(quantity + 1);\r\n    }\r\n\r\n    const handleDecrement  = () => {\r\n        let newQuantity = quantity - 1\r\n        if (newQuantity < 1)\r\n            return;\r\n        setQuantity(quantity - 1);\r\n    }\r\n\r\n    return <div className={classes[align]}>\r\n        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\" size={size}>\r\n            <Button onClick={handleIncrement}><AddIcon/></Button>\r\n            <Button>{quantity}</Button>\r\n            <Button onClick={handleDecrement}><RemoveIcon /></Button>\r\n        </ButtonGroup>\r\n    </div>\r\n\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    alignLeft: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'left',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      }\r\n    }, \r\n    alignCenter: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      }\r\n    },\r\n    alignRight: {\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'right',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      }\r\n    }\r\n  }),\r\n);\r\n ","import { DiscountScheme } from \"./DiscountScheme\";\r\n\r\nexport class Bid {\r\n    bidId: number = 0;\r\n    isInCart: boolean = false;\r\n    quantity: number = 0;\r\n    bidSuccessDate: Date | null = null;\r\n\r\n    collectionAddress: string = \"\";\r\n\r\n    discountSchemeId: number = 0;\r\n    discountScheme: DiscountScheme | null = null;\r\n\r\n    customerId: number = 0;\r\n\r\n    //View model properties\r\n    currentTotalBids?: number = 0;\r\n    addressBidCountDict?: Record<string, number> = {}\r\n}","import { Action } from \"redux\";\r\nimport { Bid } from \"../../models/Bid\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\nimport { IErrorAction, errorAction } from \"../actions/errorAction\";\r\nimport { ApiError } from \"../../models/ApiError\";\r\nimport { InterceptorService } from \"../../services/InterceptorService\";\r\n\r\n\r\nexport interface IBidAction extends Action {\r\n    type: string;\r\n    bid?: Bid | undefined;\r\n    bids?: Bid[] | undefined;\r\n    message?: string; // All internal messages and for response messages received on GET request\r\n    // Messages for create, read, update and delete\r\n    // need to separate messages and responseMessages\r\n    // some components rely on successfuly update response, before sending another get request to get the latest list\r\n    // if not separate, there will be infinite loop when using useEffect(()=>{}, [messages])\r\n    httpMessage?: string // For API messages\r\n}\r\n\r\nexport function addBidToCartAsync(bid: Bid): ThunkAction<Promise<void>, {}, {}, IBidAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.ADD_BID_TO_CART_REQUEST, message: \"Making post request to add bid to cart ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/addcart\", {\r\n                method: \"POST\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(bid)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let createdBid: Bid = (await response.json());\r\n            dispatch({ type: ACTIONS.ADD_BID_TO_CART_RECEIVED, bid: createdBid, message: response.statusText,  httpMessage: ACTIONS.HTTP_CREATE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function updateBidInCartAsync(bid: Bid): ThunkAction<Promise<void>, {}, {}, IBidAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => {\r\n        console.log(\"in thunk. bid to update\", bid.bidId)\r\n        dispatch({ type: ACTIONS.UPDATE_BID_IN_CART_REQUEST, messages: [\"Request to update bid in cart\"] });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/updatecart\", {\r\n                method: \"PUT\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(bid)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let updatedBid: Bid = (await response.json());\r\n            dispatch({ type: ACTIONS.UPDATE_BID_IN_CART_RECEIVED, bid: updatedBid, message: response.statusText, httpMessage: ACTIONS.HTTP_UPDATE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function getBidsOfCustomerInCartAsync(customerId: number) {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => { \r\n        dispatch({ type: ACTIONS.GET_BIDSOFCUSTOMER_INCART_REQUEST, messages: [\"Fetching bids in cart for customer \" + customerId]});\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/cart/\" + customerId, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n\r\n            const bids: Bid[] = await response.json();\r\n            dispatch({ type: ACTIONS.GET_BIDSOFCUSTOMER_INCART_RECEIVED, bids: bids, message: response.statusText, httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function deleteBidFromCartAsync(bidId: number) {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => { \r\n        dispatch({ type: ACTIONS.DELETE_BID_IN_CART_REQUEST, messages: [\"deleting bids in cart with bidId\" + bidId]});\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/cart/\" + bidId, {\r\n                method: \"DELETE\",\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            dispatch({ type: ACTIONS.DELETE_BID_IN_CART_RECEIVED, message: response.statusText, httpMessage: ACTIONS.HTTP_DELETE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function orderBidsFromCart(bids: Bid[]) {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => { \r\n        dispatch({ type: ACTIONS.ORDER_BIDS_IN_CART_REQUEST, messages: [\"ordering bids in cart \" + bids.toString()]});\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/cart/order\", {\r\n                method: \"PUT\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(bids)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n\r\n            dispatch({type: ACTIONS.ORDER_BIDS_IN_CART_RECEIVED, message: response.statusText, httpMessage: ACTIONS.HTTP_UPDATE_ORDER_SUCCESS })\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}\r\n\r\nexport function getPendingOrSuccessfulBids(customerId: number) {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IBidAction | IErrorAction>) => { \r\n        dispatch({ type: ACTIONS.GET_PENDING_OR_SUCCESSFUL_BIDS_REQUEST, messages: [\"getting  PendingOrSuccessfulBids of customer \" + customerId]});\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/bids/orders/\" + 1, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n\r\n            const bids: Bid[] = await response.json();\r\n            console.log(\"in thunk\", bids);\r\n\r\n            dispatch({type: ACTIONS.GET_PENDING_OR_SUCCESSFUL_BIDS_RECEIVED, bids: bids, message: response.statusText, httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\n\r\ninterface IProps { \r\n    open: boolean;  // useState(true)\r\n    setOpen: (val: boolean) => void;    //useState(true)\r\n    message: string | JSX.Element;\r\n    severity: \"error\" | \"warning\" | \"info\" | \"success\",\r\n    cleanUp?: () => any;    // callback function when notification closes;\r\n    autoHideDuration?: number;\r\n}\r\n\r\nexport function SnackbarComponent({open, setOpen, message, severity, cleanUp, autoHideDuration=6000}: IProps): JSX.Element {\r\n\r\n    const handleClose = (reason: string) => { \r\n        setOpen(false); \r\n        if (cleanUp) {\r\n            cleanUp();\r\n        }\r\n    }; \r\n    \r\n    return <Snackbar open={open} autoHideDuration={autoHideDuration} onClose={() => handleClose(\"clickaway\")}>\r\n        <Alert onClose={() => handleClose(\"clickaway\")} severity={severity} >\r\n            {message}\r\n        </Alert>\r\n    </Snackbar>\r\n}\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SelectListItem } from \"../models/SelectListItem\";\r\nimport { Control, Controller, DeepMap, FieldError } from \"react-hook-form\";\r\nimport { FormHelperText } from \"@material-ui/core\";\r\n\r\ninterface IPropUncontrolled {\r\n    title: string;\r\n    name: string,\r\n    selectListItems: SelectListItem[] // Record<text, value>,\r\n    errorMessage?: string,\r\n    defaultValue?: string,\r\n    formHelperText?: string\r\n    control: Control<Record<string, any>>,\r\n    errors: DeepMap<Record<string, any>, FieldError>,\r\n    rules: object\r\n}\r\n\r\n// For Select field used in React Hook Forms. React Hook forms are uncontrolled, i.e. no state\r\n// The data for each input element is stored in the DOM, not in the component. \r\n// React hook forms library uses a ref behind the scenes to retrieve the data\r\nexport function SelectUncontrolledComponent({title, selectListItems,\r\n  name, errorMessage=\"\", defaultValue=\"\", control, errors, rules}: IPropUncontrolled): JSX.Element {\r\n\r\n  let isError = errors[name] != null ? true : false;\r\n\r\n  return  <Controller\r\n    name={name}\r\n    defaultValue={defaultValue}\r\n    control={control}\r\n    rules={rules}\r\n    render={props => <SelectControlledComponent title={title} state={props.value} selectListItems={selectListItems} \r\n      handleChange={props.onChange} formHelperText={errorMessage} isError={isError} {...props} />  \r\n    } />\r\n}\r\n\r\ninterface IPropControlled {\r\n  title: string;\r\n  state: any;\r\n  selectListItems: SelectListItem[] // Record<text, value>\r\n  handleChange: (event: React.ChangeEvent<any>) => any | void;\r\n  isError?: boolean;\r\n  formHelperText?: string\r\n}\r\n  \r\n// For controlled forms\r\n// In a controlled component, the form data is handled by the state within the component.\r\nexport function SelectControlledComponent({title, state, selectListItems, handleChange, isError=false, formHelperText=\"\"}: IPropControlled): JSX.Element {\r\n    const classes = useStyles();\r\n\r\n    return  <FormControl className={classes.formControl} error={isError}>\r\n          <InputLabel id=\"demo-simple-select-label\">{title}</InputLabel>\r\n          <Select labelId=\"demo-simple-select-label\"\r\n              autoWidth={true}\r\n              value={state}\r\n              onChange={event => handleChange(event)} > \r\n              <MenuItem value={undefined} divider>\r\n                  <em>None</em>\r\n              </MenuItem>\r\n              {\r\n                selectListItems.map((selectListItem, index) => <MenuItem key={index} value={selectListItem.value}>{selectListItem.text}</MenuItem>)\r\n              }\r\n          </Select>\r\n          { isError &&\r\n            <FormHelperText>{formHelperText}</FormHelperText>\r\n          }\r\n          \r\n    </FormControl>\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      //margin: theme.spacing(1),\r\n      minWidth: 150,\r\n    },\r\n    selectEmpty: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  }),\r\n);","export class SelectListItem {\r\n    disabled: boolean = false;\r\n    selected: boolean = false;\r\n    text: string = \"\";\r\n    value: any;\r\n\r\n\r\n    constructor(text = \"\", value: any) {\r\n        this.text = text;\r\n        this.value = value;\r\n    }\r\n}","import React from \"react\";\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\ninterface IProp {\r\n    textDict: Record<string, any>\r\n    color?: \"inherit\" | \"initial\" | \"textSecondary\" | \"primary\" | \"secondary\" | \"textPrimary\" | \"error\" | undefined\r\n}\r\n\r\nexport function TextComponent({textDict, color=\"textSecondary\"}: IProp): JSX.Element {\r\n    console.log(textDict);\r\n    let paras: JSX.Element[] = [];\r\n    for (let [key, value] of Object.entries(textDict)) {\r\n        let para: JSX.Element = <Typography variant=\"body2\" color={color} component=\"p\" align=\"left\" key={key}>\r\n            <b>{key}&nbsp;</b>{value} \r\n        </Typography>\r\n        paras.push(para)\r\n    }\r\n\r\n    return <Container>\r\n        {paras}\r\n    </Container>\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport { DiscountScheme } from \"../models/DiscountScheme\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { getDiscountSchemeAsync } from \"../store/thunks/discountSchemeThunk\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Container from '@material-ui/core/Container';\r\nimport { CartButtons } from \"../components/CartButtons\";\r\nimport e_commerce from '../images/e_commerce.png';\r\nimport { Bid } from \"../models/Bid\";\r\nimport { addBidToCartAsync, updateBidInCartAsync } from \"../store/thunks/bidThunk\";\r\nimport { SnackbarComponent } from \"../components/SnackbarComponent\"; \r\nimport { SelectControlledComponent } from \"../components/SelectComponents\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { SelectListItem } from \"../models/SelectListItem\";\r\nimport { TextComponent } from \"../components/TextComponent\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nexport interface IProps {\r\n    discountSchemeId: number;\r\n    MODE: \"CREATE\" | \"UPDATE\";\r\n    bidIdToUpdate?: number;\r\n}\r\n\r\nexport function DiscountSchemeDetailPage({discountSchemeId, MODE, bidIdToUpdate=0}: IProps): JSX.Element {\r\n    const dispatch: Dispatch<any> = useDispatch();  \r\n\r\n    // Quantity to add to cart\r\n    const [quantity, setQuantity] = useState(1);    \r\n\r\n    // State to determine whether to show notification\r\n    const [open, setOpen] = useState(false);\r\n  \r\n    // The discountScheme retrieved through a GET request\r\n    useEffect(() => {\r\n        const action = getDiscountSchemeAsync(discountSchemeId);\r\n        dispatch(action);\r\n        \r\n        // Note that you cannot pass values obtained from useSelector to the useEffect dependency array\r\n        // Since you are returning a new object (at a different memory address) from the reducer, \r\n        // useEffect will treat it that vaLue changed when doing shallow comparison\r\n    }, [discountSchemeId]);  \r\n\r\n    let ds: DiscountScheme = useSelector((action: RootState) => action.discountSchemeReducer.discountScheme as DiscountScheme ) ?? new DiscountScheme();      \r\n\r\n    console.log(\"in DiscountSchemeDetailPage\", ds);\r\n\r\n    // Collection Address\r\n    const addressBidCountDict = ds.addressBidCountDict as Record<string, number>;   // { collectionAddress: number of bids} \r\n    const selectListItems: SelectListItem[] = [];\r\n    for (let address in addressBidCountDict) {\r\n        let selectListItem: SelectListItem = new SelectListItem(address, address);\r\n        selectListItems.push(selectListItem);\r\n    }\r\n\r\n    const [address, setAddress] = useState<string>(\"\");\r\n    const handleChangeAddress = (event: React.ChangeEvent<any>) => {\r\n        let selectedAddress: string = event.target.value;\r\n        console.log(selectedAddress);\r\n        setAddress(selectedAddress);\r\n    }\r\n    const numBidsAtAddress: number = addressBidCountDict?.address;\r\n    const avgDeliveryCharge: number = (!numBidsAtAddress) ? ds.deliveryCharge : ds.deliveryCharge / (numBidsAtAddress + 1);\r\n \r\n    // POST bid when user bids for the discountScheme\r\n    const submitBid = () => {\r\n        let bid: Bid = new Bid();\r\n        bid.customerId = 1;\r\n        bid.collectionAddress = address;\r\n        bid.quantity = quantity;\r\n\r\n        let action = null;\r\n        if (MODE === \"CREATE\") {\r\n            bid.discountSchemeId = ds.discountSchemeId;\r\n            action = addBidToCartAsync(bid);\r\n        } else if (MODE === \"UPDATE\") {\r\n            bid.bidId = bidIdToUpdate;\r\n            action = updateBidInCartAsync(bid);\r\n        }\r\n\r\n        dispatch(action);\r\n        setOpen(true);\r\n    };\r\n    \r\n    // The details of the the discountScheme to display\r\n    let dateString: string = \"\";\r\n    if (ds.expiryDate) {\r\n        let date: Date = new Date(ds.expiryDate.toString());\r\n        dateString = date.toDateString();\r\n    }  \r\n\r\n    let currentBids: number = ds.bids\r\n            .filter(bid => !bid.isInCart)\r\n            .reduce((accum, bid) => accum + bid?.quantity, 0);\r\n    \r\n    let leftExpiryDateDict: Record<string, any> = {\r\n        \"Expiry Date\": dateString\r\n    }\r\n    let rightDescriptionDict: Record<string, any> = {\r\n        \"Description\": ds.product?.description,\r\n    }\r\n    let leftPriceDict: Record<string, any> = {\r\n        \"Discounted Price\": \"$\" + ds.discountedPrice,\r\n    }\r\n    let rightPriceDict: Record<string, any> = {\r\n        \"Original Price\": \"$\" + ds.product?.originalPrice ?? \"$\"\r\n    }\r\n    let leftQuantityDict: Record<string, any> = {\r\n        \"Remaining Bids Needed\": ds.minOrderQnty - currentBids,\r\n    }\r\n    let rightQuantityDict: Record<string, any> = {\r\n        \"Min Collective Quantity\": ds.minOrderQnty,\r\n        \"Current Total Bids\": currentBids,\r\n    }\r\n    let addressTextDict: Record<string, any> = {\r\n        \"Delivery Charge\": \"$\" + ds.deliveryCharge,\r\n        \"Current bids at collection point\": numBidsAtAddress,\r\n    }\r\n    let avgDeliveryChargeDict: Record<string, any> = {\r\n        \"Current Average Delivery charge\": \"approx $\" + avgDeliveryCharge\r\n    }    \r\n    return  <Container maxWidth=\"sm\">\r\n        <Typography color=\"primary\" variant=\"h5\" align=\"left\">{ds.product?.name ?? \"\"}</Typography>\r\n        <CardMedia \r\n            component=\"img\"\r\n            image={e_commerce}\r\n            title=\"https://acowebs.com/impact-ecommerce-society/\"/>\r\n        <br/>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                    <TextComponent textDict={rightDescriptionDict}/>\r\n                    <hr/>\r\n                </Grid>\r\n            <Grid item xs={12}>\r\n                <TextComponent textDict={leftExpiryDateDict} color=\"textPrimary\"/>\r\n                <hr/>\r\n            </Grid>           \r\n            <Grid item xs={6}>\r\n                <TextComponent textDict={leftPriceDict} color=\"textPrimary\"/>\r\n                <hr/>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextComponent textDict={rightPriceDict}/>  \r\n                <hr/>          \r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextComponent textDict={leftQuantityDict} color=\"textPrimary\"/>            \r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <TextComponent textDict={rightQuantityDict}/>            \r\n            </Grid>\r\n        </Grid>\r\n        \r\n        <hr/>\r\n        <Grid container>\r\n            <Grid item xs={4}>        \r\n                <SelectControlledComponent title={\"Delivery\"} state={address} selectListItems={selectListItems} handleChange={handleChangeAddress} />\r\n            </Grid>\r\n            <Grid item xs={8}>\r\n                <TextComponent textDict={addressTextDict} />\r\n                <TextComponent textDict={avgDeliveryChargeDict} color=\"textPrimary\" />\r\n            </Grid>\r\n        </Grid>\r\n        <hr/>\r\n       \r\n        <CartButtons quantity={quantity} setQuantity={setQuantity} align={\"alignCenter\"}/>\r\n        <ButtonGroup size={\"medium\"}>            \r\n            <Button  onClick={submitBid} color=\"primary\" variant=\"contained\" disabled={!address || quantity < 1}>Add To Cart</Button>           \r\n          </ButtonGroup>\r\n        <SnackbarComponent open={open} setOpen={setOpen} message={\"Bid successfully created\"} severity={\"success\"}/>\r\n    </Container>\r\n}","import React from \"react\";\r\nimport { DiscountSchemeDetailPage } from \"./DiscountSchemeDetailPage\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n// Essentially a HOC\r\nexport function DiscountSchemeDetailHOC(): JSX.Element {\r\n    \r\n    // DiscountScheme Id parse from route parameter\r\n    let routeParams: Record<string, string>  = (useParams()) as Record<string, string>;\r\n    const discountSchemeId: number = parseInt(routeParams[\"discountSchemeId\"]);\r\n\r\n    return <DiscountSchemeDetailPage discountSchemeId={discountSchemeId} MODE=\"CREATE\" />\r\n}","import MaterialTable from 'material-table';\r\nimport React from \"react\"; \r\n\r\nimport { forwardRef } from 'react';\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport UnfoldMore from \"@material-ui/icons/UnfoldMore\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\n\r\nimport { Icons } from 'material-table';\r\nimport  { SvgIconTypeMap } from \"@material-ui/core/SvgIcon\";\r\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\r\n\r\ninterface IProp {\r\n  title: string,\r\n  data: any[];\r\n  columnNames: any[];\r\n  accessors: string[];\r\n  handleChecked?: (rowIds: number[]) => any;\r\n  idColumnAccessorName?: string; //to hide the id column,\r\n  pageSize?: number;\r\n  actionIcon?: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>;\r\n  enableSearch?: boolean;\r\n  enablePaging?: boolean;\r\n  enableSelection?: boolean;\r\n  actionMessage?: string;\r\n  detailPanelFieldName?: string; //To render the detail panel\r\n  enabledDetailPanel?: boolean;\r\n}\r\n\r\n \r\nexport function DataTable({title, data, columnNames, accessors, handleChecked=defaultHandleChecked, idColumnAccessorName=\"\", pageSize=10, actionIcon,\r\n  enablePaging=false, enableSearch=false, actionMessage=\"Action\", enableSelection=false, detailPanelFieldName=\"\", enabledDetailPanel=false  }: IProp): JSX.Element {\r\n\r\n  let headerDicts: any[] = [];\r\n    for(let i = 0; i < columnNames.length; i++) {\r\n        let header: string = columnNames[i];\r\n        let accessor: string = accessors[i];    \r\n        let headerDict: any = {\r\n            \"title\": header,\r\n            \"field\": accessor,\r\n            \"hidden\": accessor === idColumnAccessorName\r\n        }; \r\n        headerDicts.push(headerDict);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <div> \r\n        <MaterialTable        \r\n          icons={tableIcons}\r\n            title={title}\r\n            columns={headerDicts}\r\n            data={data}        \r\n            options={{\r\n              selection: enableSelection,\r\n              pageSize: pageSize,\r\n              search: enableSearch,\r\n              paging: enablePaging,\r\n              rowStyle:{\r\n                height: \"100px\"\r\n              },            \r\n            }}\r\n            detailPanel={[\r\n              rowData => ({\r\n                disabled: !enabledDetailPanel,\r\n                icon: () => <ChevronRight className={enabledDetailPanel ? classes.display : classes.displayNone } />,\r\n                render: () => returnDetailTable(rowData, detailPanelFieldName)\r\n              })\r\n            ]}\r\n            //rowData => returnDetailTable(rowData, detailPanelFieldName)\r\n            \r\n      />\r\n      </div>\r\n    )\r\n}\r\n\r\n  // There is a bug with Material Table where the table is fully rerendered on parent state update since 1.53.0\r\n  // https://github.com/mbrn/material-table/issues/1265 \r\nfunction returnDetailTable(rowData: any, detailPanelFielddName: string): JSX.Element {\r\n  console.log(rowData);\r\n  return rowData[detailPanelFielddName] as JSX.Element;\r\n}\r\n\r\nconst defaultHandleChecked = (val?: any) => {};\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    displayNone: {\r\n      display: 'none'      \r\n    },\r\n    display: {\r\n      display: \"initial\"\r\n    }\r\n  }),\r\n);\r\n  \r\nconst tableIcons = {\r\n  Add: forwardRef<any, Icons>((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef<any, Icons>((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef<any, Icons>((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef<any, Icons>((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef<any, Icons>((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef<any, Icons>((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef<any, Icons>((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef<any, Icons>((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef<any, Icons>((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef<any, Icons>((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef<any, Icons>((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef<any, Icons>((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef<any, Icons>((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef<any, Icons>((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef<any, Icons>((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef<any, Icons>((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef<any, Icons>((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n  AddShoppingCartIcon: forwardRef<any, Icons>((props, ref) => <AddShoppingCartIcon {...props} ref={ref} />)\r\n};","import React from \"react\";\r\nimport { Bid } from \"../models/Bid\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Button } from \"@material-ui/core\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\ninterface IProp {\r\n    bids: Bid[];\r\n    rowIds: number[];\r\n    handleOrder: () => void\r\n}\r\n\r\nexport function OrderCheckoutComponent({bids, rowIds, handleOrder}: IProp) {\r\n\r\n    console.log(\"in orderCheckOut\", bids);\r\n\r\n    const selectedBids: Bid[] = bids.filter(bid =>  rowIds.includes(bid.bidId));\r\n\r\n    const totalDeliveryCharge = selectedBids.map(bid => {\r\n        const addressBidCountDict = bid.addressBidCountDict as Record<string, number>;   // { collectionAddress: number of bids} \r\n        const numBidsAtAddress: number = addressBidCountDict[bid.collectionAddress];\r\n        const deliveryCharge: number = bid?.discountScheme?.deliveryCharge ?? 0;\r\n        const avgDeliveryCharge: number = (!numBidsAtAddress) ? deliveryCharge : deliveryCharge / numBidsAtAddress;\r\n        return avgDeliveryCharge\r\n    }).reduce((accum, charge) => accum + charge, 0);\r\n\r\n    let totalPrice: number = selectedBids\r\n        .reduce((accum, bid) => accum + bid.quantity * (bid.discountScheme?.discountedPrice ?? 0), 0);\r\n\r\n    const totalQuantity: number = selectedBids\r\n        .reduce((accum, bid) => accum + bid.quantity ?? 0, 0);\r\n\r\n    \r\n    \r\n    return <Paper>\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={3}></Grid>\r\n            <Grid item xs={6}>\r\n                <Typography variant={\"body1\"} align={\"center\"} color=\"textSecondary\" paragraph={true}><b>Total Quantity: </b>{totalQuantity}</Typography>\r\n                <Typography variant={\"body1\"} align={\"center\"} color=\"textSecondary\" paragraph={true}><b>Total Price: </b>${totalPrice}</Typography>\r\n                <Typography variant={\"body1\"} align={\"center\"} color=\"textSecondary\" paragraph={true}><b>Total Delivery Charge: </b>${totalDeliveryCharge}</Typography>\r\n                <Typography variant={\"body1\"} align={\"center\"} color=\"secondary\" paragraph={true}><b>Grand Total: </b>${totalDeliveryCharge + totalQuantity}</Typography>\r\n            </Grid>\r\n            <Grid item xs={3} alignContent=\"flex-end\">\r\n                <Button color=\"secondary\" size=\"large\" variant=\"contained\" onClick={handleOrder} disabled={selectedBids.length < 1}>Order Bids</Button>\r\n            </Grid>        \r\n        </Grid> \r\n    </Paper>\r\n    \r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Bid } from \"../models/Bid\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { deleteBidFromCartAsync, getBidsOfCustomerInCartAsync, orderBidsFromCart, updateBidInCartAsync } from \"../store/thunks/bidThunk\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { DataTable } from \"../components/DataTable\";\r\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\r\nimport { CartButtons } from \"../components/CartButtons\";\r\nimport { SnackbarComponent } from \"../components/SnackbarComponent\";\r\nimport { Button, Container } from \"@material-ui/core\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { OrderCheckoutComponent } from \"../components/OrderCheckoutComponent\";\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SelectListItem } from \"../models/SelectListItem\";\r\nimport { SelectControlledComponent } from \"../components/SelectComponents\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { TextComponent } from \"../components/TextComponent\";\r\nimport { cloneDeep } from \"lodash\";\r\n\r\nclass Row {\r\n    bidId: number | undefined;\r\n    checkbox: JSX.Element | undefined;\r\n    name: string | undefined;\r\n    discountedPrice: string | undefined;\r\n    updateCartComponent: JSX.Element | undefined;    \r\n    collectionAddress: JSX.Element | undefined;\r\n    deliveryCharge: JSX.Element | undefined;\r\n    deleteButton: JSX.Element | undefined;\r\n    detailPanel: JSX.Element | undefined;\r\n}\r\n\r\nexport function CartPage(): JSX.Element {\r\n    const history = useHistory();          \r\n    const dispatch: Dispatch<any> = useDispatch(); \r\n\r\n    // State to determine whether to show notification\r\n    const [open, setOpen] = useState(false);\r\n    const [notificationMessage, setNotificationMessage] = useState(\"\");\r\n    const handleNotification = (isOpen: boolean, message: string) => {\r\n        setOpen(isOpen);\r\n        setNotificationMessage(message);\r\n    }    \r\n\r\n    // The Bids received from the GET request\r\n    const bidsInCart: Bid[] = useSelector((action: RootState) => action.bidReducer.bids as Bid[] ) ?? [];  \r\n    const [bids, setBids] = useState<Bid[]>([]);\r\n    useEffect(() => {\r\n        setBids(cloneDeep(bidsInCart));\r\n    }, [bidsInCart.length])\r\n    console.log(\"bids received\", bidsInCart);\r\n\r\n    // For some reason, useState(bidsInCart.map(bid => bid.quantity)) will produce only an empty array\r\n    // React hooks are always one step behind. On next render, the state variable will have a new value.\r\n    useEffect(() => {\r\n        document.title = \"Cart\";\r\n        const customerId = 1;\r\n        const action = getBidsOfCustomerInCartAsync(customerId);\r\n        dispatch(action);        \r\n    }, []); \r\n\r\n    // When the user selects the row (Bid) in the datatable\r\n    const [selectedRowBidIds, setSelectedRowBidIds] = useState<number[]>([]);\r\n    const handleOrder = () => {\r\n        let bidsToOrder: Bid[] = bids.filter(bid => selectedRowBidIds.includes(bid.bidId));\r\n        const action = orderBidsFromCart(bidsToOrder);\r\n        dispatch(action);\r\n    };\r\n\r\n    //Response on update. If update is successful, make another request to get bids in cart\r\n    const apiMessage: string = useSelector( (action: RootState) => action.bidReducer.httpMessage as string ) ?? \"\"; \r\n    useEffect(() => {\r\n        // if user successful update quantity or remove from cart, refresh page\r\n        if (apiMessage.includes(ACTIONS.HTTP_UPDATE_SUCCESS) || apiMessage.includes(ACTIONS.HTTP_DELETE_SUCCESS)) {\r\n            const customerId = 1;\r\n            // const action = getBidsOfCustomerInCartAsync(customerId);\r\n            //dispatch(action); \r\n        }\r\n        // if user successfully makes an order, redirect to orders page\r\n        if (apiMessage.includes(ACTIONS.HTTP_UPDATE_ORDER_SUCCESS)) {\r\n            console.log(apiMessage);\r\n            history.push(\"/orders\");\r\n        }\r\n    }, [apiMessage]);\r\n\r\n    // Convert the Bids to Rows to pass to the DataTable\r\n    const rows: Row[] = bids.map(bid => createRowFromBid(bid));    \r\n\r\n    // To add React components to each row\r\n    for (let i = 0; i < bids.length; i++) {\r\n        let bid: Bid = bids[i];       \r\n        const quantity: number = bid.quantity as number;\r\n\r\n        // Method reference to POST updated id to pass into CartButtons\r\n        const handleUpdateCart = (newQuantity: number, collectionAddress: string) => {\r\n            let bidsCopy: Bid[] = cloneDeep(bidsInCart);    \r\n            let bidCopy = bidsCopy[i];\r\n            bidCopy.quantity = newQuantity;\r\n            bidCopy.collectionAddress = collectionAddress;\r\n            setBids(bidsCopy);\r\n            const updateAction = updateBidInCartAsync(bidCopy);\r\n            dispatch(updateAction);\r\n            handleNotification(true, \"bid added to cart\"); \r\n        }\r\n\r\n        // Method reference to set quantity to pass into CartButtons\r\n        const handleChangeQuantity = (newQuantity: number) => {\r\n            handleUpdateCart(newQuantity, bid.collectionAddress);            \r\n        };\r\n\r\n        const handleChangeAddress = (event: React.ChangeEvent<any>) => {\r\n            let selectedAddress: string = event.target.value;\r\n            handleUpdateCart(bid.quantity, selectedAddress);\r\n        }\r\n\r\n        const toggleCheckedRowId = () => {\r\n            const bidId: number = bid.bidId;\r\n            if (!selectedRowBidIds.includes(bidId)) {\r\n                setSelectedRowBidIds([...selectedRowBidIds, bidId])\r\n            } else {\r\n                let newSelectedRowIds: number[] = selectedRowBidIds.filter(id => id !== bidId);\r\n                setSelectedRowBidIds(newSelectedRowIds);\r\n            }\r\n        }\r\n\r\n        const deleteBid = () => {\r\n            const bidId: number = bid.bidId;\r\n            const deleteAction = deleteBidFromCartAsync(bidId);            \r\n            dispatch(deleteAction);\r\n            handleNotification(true, \"item deleted\");\r\n            let newBids = cloneDeep(bids).filter((bid, index) => index != i);\r\n            console.log(bids, newBids);\r\n            setBids(newBids);\r\n        } \r\n\r\n        let dateString = \"\";\r\n        if (bid.discountScheme?.expiryDate) {\r\n            let date: Date = new Date(bid.discountScheme.expiryDate.toString());\r\n            dateString = date.toDateString();        \r\n        }\r\n\r\n        rows[i].updateCartComponent = <CartButtons quantity={quantity} setQuantity={handleChangeQuantity} size={\"small\"}/>\r\n        rows[i].checkbox = <Checkbox size=\"small\" onChange={toggleCheckedRowId} />\r\n        rows[i].deleteButton = <Button size={\"small\"} variant={\"contained\"} color={\"primary\"} onClick={deleteBid}>Delete</Button>\r\n\r\n        // Collection Address\r\n        const addressBidCountDict = bid.addressBidCountDict as Record<string, number>;   // { collectionAddress: number of bids} \r\n        const selectListItems: SelectListItem[] = [];\r\n        for (let address in addressBidCountDict) {\r\n            let selectListItem: SelectListItem = new SelectListItem(address, address);\r\n            selectListItem.selected = bid.collectionAddress === address;\r\n            selectListItems.push(selectListItem);\r\n        }        \r\n        rows[i].collectionAddress = <SelectControlledComponent title={\"Delivery\"} state={bid.collectionAddress} selectListItems={selectListItems} handleChange={handleChangeAddress} />\r\n\r\n        // Detail Panel\r\n        let descriptionDict: Record<string, any> = {\r\n            \"Description\": bid.discountScheme?.product?.description,\r\n            \"Bid Expiry Date\": dateString\r\n        }  \r\n\r\n        let quantityDict: Record<string, any> = {\r\n            \"Min Order Quantity\": bid.discountScheme?.minOrderQnty,\r\n            \"Current total bids\": bid.currentTotalBids,\r\n            \"Remaining bids required\": bid.discountScheme?.minOrderQnty as number - (bid.currentTotalBids as number)\r\n        }\r\n\r\n        let deliveryDict: Record<string, any> = {\r\n            \"Delivery Charge\": \"$\" + bid.discountScheme?.deliveryCharge\r\n        }\r\n        rows[i].detailPanel = <Grid container>\r\n            <Grid item xs={4}>\r\n                <TextComponent textDict={descriptionDict}/>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <TextComponent textDict={quantityDict}/>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n                <TextComponent textDict={deliveryDict}/>\r\n            </Grid>\r\n        </Grid>\r\n        \r\n    }\r\n\r\n    let accessors: string[] = Object.keys(new Row());   // accessors allow the DataTable to access the properties of the Row object. \r\n    const detailPanelName: string = \"detailPanel\";  // Remove access to detailPanel property\r\n    accessors = accessors.filter(accessor => accessor !== detailPanelName);\r\n    const columnNames: any[] = [\"BidId\", \"Check Box\", \"Name\", \"Price per Item\", \"Quantity\", \"Collection Address\", \"Average Delivery Charge\", \"Remove\"];\r\n\r\n    return <Container maxWidth=\"xl\">\r\n        <OrderCheckoutComponent bids={bids} rowIds={selectedRowBidIds} handleOrder={handleOrder} />\r\n        <br/>\r\n        <DataTable data={rows} columnNames={columnNames} accessors={accessors} title=\"Cart\" \r\n            idColumnAccessorName={\"bidId\"}             \r\n            actionMessage=\"Make Order\"  actionIcon={AddShoppingCartIcon}  \r\n            enabledDetailPanel={true} detailPanelFieldName={detailPanelName} />\r\n        <SnackbarComponent open={open} setOpen={setOpen} message={notificationMessage} severity={\"success\"}/>        \r\n    </Container>\r\n}\r\n\r\n\r\nfunction createRowFromBid(bid: Bid): Row {   \r\n\r\n    let discountedPrice = bid.discountScheme?.discountedPrice as number;\r\n    let originalPrice = bid.discountScheme?.product?.originalPrice as number;\r\n\r\n    let row: Row = new Row();\r\n    row.bidId = bid.bidId;\r\n    row.discountedPrice = `$${discountedPrice} (Save $${originalPrice - discountedPrice})`;\r\n    row.name = bid.discountScheme?.product?.name;\r\n\r\n    const addressBidCountDict = bid.addressBidCountDict as Record<string, number>; \r\n    const numBidsAtAddress: number = addressBidCountDict[bid.collectionAddress];\r\n    const deliveryCharge: number = bid?.discountScheme?.deliveryCharge ?? 0;\r\n    const avgDeliveryCharge: number = (!numBidsAtAddress) ? deliveryCharge : deliveryCharge / (numBidsAtAddress + 1);\r\n    row.deliveryCharge = <Grid container>\r\n        <Grid item xs={6}>\r\n            <span>{`$${avgDeliveryCharge}`}</span>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            <span style={{borderBottom:\"1px solid black\", display:\"block\", fontSize:\"12px\"}}>${deliveryCharge}</span>\r\n            <span style={{fontSize:\"12px\"}}>{numBidsAtAddress} other bids here</span>\r\n        </Grid>\r\n    </Grid>\r\n    \r\n    return row;\r\n}\r\n ","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { Bid } from \"../models/Bid\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { getPendingOrSuccessfulBids } from \"../store/thunks/bidThunk\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport { DataTable } from \"../components/DataTable\";\r\n\r\nclass Row {\r\n    name: string | undefined;\r\n    discountedPrice: string | undefined;\r\n    quantity: string | undefined;\r\n    deliveryCharge: string | undefined;\r\n    collectionAddress: string | undefined;\r\n    remainingBidsRequired: number | undefined;\r\n    bidExpiryDate: string | undefined;\r\n    bidStatus: \"SUCCESS\" | \"PENDING\" | \"FAILED\" | undefined\r\n};\r\n\r\nexport function OrdersPage(): JSX.Element {\r\n    document.title = \"Orders\";\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n\r\n    const bids: Bid[] = useSelector((action: RootState) => action.bidReducer.bids as Bid[] ) ?? [];\r\n\r\n    useEffect(() => {\r\n        const customerId: number = 1;\r\n        const action = getPendingOrSuccessfulBids(customerId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const columnNames: string[] = [\"Name\", \"Discounted Price Per Item\", \"Quantity\", \"Delivery Charge\", \"Collection Address\", \"Remaining Bids Required\", \"Bid Expiry Date\", \"Bid Status\"];\r\n    const accessors: string[] = Object.keys(new Row());\r\n    const rows: Row[] = bids.map(bid => createRowFromBid(bid));\r\n\r\n     return <Container maxWidth=\"lg\">\r\n         <DataTable columnNames={columnNames} accessors={accessors} data={rows} title={\"Submitted Bids\"} enablePaging={true} pageSize={5} />\r\n     </Container>\r\n}\r\n\r\nfunction createRowFromBid(bid: Bid): Row {   \r\n\r\n    let discountedPrice: number = bid.discountScheme?.discountedPrice as number;\r\n    let originalPrice: number = bid.discountScheme?.product?.originalPrice as number;\r\n    let minOrderQnty: number = bid.discountScheme?.minOrderQnty as number;\r\n    let currentTotalBids: number = bid.currentTotalBids as number;\r\n    console.log(\"remainingBidsRequired\", minOrderQnty, currentTotalBids, minOrderQnty - currentTotalBids, \"bidId: \" + bid.bidId);\r\n\r\n    let row: Row = new Row();\r\n    row.quantity = bid.quantity + \"\";\r\n    row.collectionAddress = bid.collectionAddress;\r\n    row.discountedPrice = `$${discountedPrice} (Save $${originalPrice - discountedPrice})`;\r\n    row.deliveryCharge = \"$\" + bid.discountScheme?.deliveryCharge;\r\n    row.name = bid.discountScheme?.product?.name;\r\n    row.remainingBidsRequired = minOrderQnty - currentTotalBids;\r\n\r\n    let expiryDate: Date = new Date(bid.discountScheme?.expiryDate as Date);    //json return date as strings\r\n    row.bidExpiryDate = expiryDate.toDateString();\r\n\r\n    if (bid.bidSuccessDate != null) {\r\n        row.bidStatus = \"SUCCESS\";        \r\n    } else if (new Date() > expiryDate) {\r\n        row.bidStatus = \"FAILED\";\r\n    } else {\r\n        row.bidStatus = \"PENDING\";\r\n    }\r\n    \r\n    return row;\r\n}\r\n ","import { DiscountScheme } from \"./DiscountScheme\";\r\n\r\nexport class Product {\r\n    productId: number = 0;\r\n    name: string = \"\";\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    originalPrice: number = 0;\r\n    producerId: number = 0;\r\n\r\n    discountSchemes: DiscountScheme[] = [];\r\n\r\n}","import React from \"react\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button } from \"@material-ui/core\";\r\nimport CardMedia from '@material-ui/core/CardMedia'; \r\nimport imageUrl  from  \"../../src/images/e_commerce.png\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from '@material-ui/core/Container';\r\n\r\ninterface IProps {\r\n    open: boolean;  //open is part of useState(false)\r\n    toggleOpen: () => void; //toggleOpen is part of useState(false)\r\n    title?: string;\r\n    showPicture?: boolean;\r\n    content?: JSX.Element;  // paragraphs to display, e.g. [<p></p>, <p></p>]\r\n    actionTitle?: string,   //title of button\r\n    action?: (arg?: any) => any; //callback function on button click\r\n    secondaryActionTitle?: string,\r\n    secondaryAction?: (arg?: any) => any;\r\n}\r\n\r\nexport function DialogComponent({open, toggleOpen, title, content, actionTitle, action, showPicture=false, secondaryActionTitle, secondaryAction}: IProps): JSX.Element {\r\n\r\n    return <Dialog open={open} onClose={toggleOpen} aria-labelledby=\"form-dialog-title\" maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\r\n            <DialogContent>\r\n                { showPicture &&\r\n                    <CardMedia \r\n                        component=\"img\"\r\n                        \r\n                        //height=\"140\"\r\n                        image={imageUrl}\r\n                        title=\"https://acowebs.com/impact-ecommerce-society/\"/>\r\n                } \r\n                <br/>               \r\n                {content}                \r\n            </DialogContent>\r\n\r\n            <Container>\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={8}></Grid>\r\n                    <Grid item xs={4}>\r\n                    {actionTitle &&\r\n                        <DialogActions>\r\n                            <Button onClick={action} color=\"primary\" variant=\"outlined\">\r\n                                {actionTitle}\r\n                            </Button>\r\n                        </DialogActions>\r\n                    } \r\n                    </Grid>\r\n                </Grid>                       \r\n\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={4}>\r\n                    {secondaryActionTitle &&\r\n                        <DialogActions>\r\n                            <Button onClick={secondaryAction as () => {}} color=\"secondary\" variant=\"outlined\">\r\n                                {secondaryActionTitle}\r\n                            </Button>\r\n                        </DialogActions>\r\n                    }  \r\n                    </Grid>\r\n                    <Grid item xs={4}></Grid>\r\n                    <Grid item xs={4}>\r\n                        <DialogActions>                \r\n                            <Button onClick={toggleOpen} color=\"primary\" variant=\"outlined\">\r\n                                Close\r\n                            </Button>\r\n                        </DialogActions>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n            \r\n            \r\n            \r\n    </Dialog>\r\n\r\n}\r\n","import { Container, Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { DataTable } from \"../components/DataTable\";\r\nimport { DiscountScheme } from \"../models/DiscountScheme\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { deleteDiscountSchemeAsync, getDiscountSchemesWithBidOfProducer } from \"../store/thunks/discountSchemeThunk\";\r\nimport { cloneDeep, uniqBy } from \"lodash\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { SelectControlledComponent } from \"../components/SelectComponents\";\r\nimport { SelectListItem } from \"../models/SelectListItem\";\r\nimport { Product } from \"../models/Product\";\r\nimport { DialogComponent } from \"../components/DialogComponent\";\r\nimport { TextComponent } from \"../components/TextComponent\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\n\r\ntype Status = \"SUCCESS\" | \"PENDING\" | \"FAILED\" | undefined;\r\n\r\nclass Row {\r\n    name: JSX.Element | undefined;\r\n    discountedPrice: JSX.Element | undefined;\r\n    deliveryCharge: string | undefined = \"0\";\r\n    minOrderQnty: number | undefined = 0;\r\n    currentBids: number | undefined = 0;    \r\n    bidExpiryDate: string | undefined  = \"\";\r\n    bidStatus: Status;\r\n    delete: JSX.Element | undefined;\r\n}\r\n\r\nexport function ProducerDiscountSchemePage(): JSX.Element {\r\n\r\n    document.title = \"Schemes\";\r\n    const producerId: number = 2;\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const history = useHistory(); \r\n\r\n    // Single source of truth, avoid mutating it\r\n    const immutableDiscountSchemes: DiscountScheme[] = useSelector((action: RootState) => action.discountSchemeReducer.discountSchemes as DiscountScheme[]) ?? [];\r\n    useEffect(() => {\r\n        \r\n        const action = getDiscountSchemesWithBidOfProducer(producerId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    // For the AutoComplete Filter\r\n    let products: Product[] = immutableDiscountSchemes.map(ds => ds.product ?? new Product());\r\n    products = uniqBy(products, (product) => product.name);    \r\n\r\n    // DiscountSchemes to dispaly to the data table, subject to filtering\r\n    const [discountSchemes, setDiscountSchemes] = useState<DiscountScheme[]>([]);\r\n    useEffect(() => {\r\n        console.log(immutableDiscountSchemes);\r\n        setDiscountSchemes(immutableDiscountSchemes);        \r\n    }, [immutableDiscountSchemes.length]);\r\n\r\n    const [status, setStatus] = useState<Status>();\r\n    const handleStatusChange = ((event: React.ChangeEvent<any>) => {\r\n        let selectedStatus: Status = event.target.value as Status;\r\n        setStatus(selectedStatus);\r\n    });\r\n\r\n    //Status filtering\r\n    const selectListItems: SelectListItem[] = [\"SUCCESS\", \"PENDING\", \"FAILED\"].map((status) => new SelectListItem(status, status));\r\n    \r\n    // Product name filtering\r\n    const [productName, setProductName] = useState<string>(\"\");\r\n    const handleChangeProductName = (name: string) => {\r\n        console.log(name);\r\n        setProductName(name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let discountSchemesCopy: DiscountScheme[] = cloneDeep(immutableDiscountSchemes);\r\n        discountSchemesCopy = discountSchemesCopy\r\n            .filter(ds => status ? determineStatusOfScheme(ds) === status : true )\r\n            .filter(ds => productName ? ds.product?.name?.toLowerCase()?.includes(productName.toLowerCase()) : true)\r\n        setDiscountSchemes(discountSchemesCopy);\r\n    }, [status, productName]);\r\n\r\n    // To display the product as a dialog when user clicks on the link\r\n    const [openProductDialog, setOpenProductDialog] = useState<boolean>(false);\r\n    const [product, setProduct] = useState<Product>(new Product());\r\n    let productTextDict: Record<string, any> = {\r\n        \"Name\": product.name,\r\n        \"Original Price\": \"$\" + product.originalPrice,\r\n        \"Category\": product.category,\r\n        \"Description\": product.description        \r\n    }\r\n    let productTextComponent: JSX.Element = <TextComponent textDict={productTextDict} />\r\n\r\n    // To redirect user to create discount Scheme\r\n    const redirectToForm = () => history.push(\"/producer/discountSchemes/create\");   \r\n\r\n    // To create rows for the data table\r\n    const rows: Row[] = [];\r\n\r\n    // When user clicks delete in the opened product dialog, close it, then open another and confirm delete\r\n    const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false); \r\n    const [targetDiscountScheme, setTargetDiscountScheme] = useState<DiscountScheme>(new DiscountScheme());\r\n    const deleteProduct = () => {\r\n        if (targetDiscountScheme.bids.length > 0) {\r\n            return;\r\n        }\r\n        console.log(\"discountSchemeId\", targetDiscountScheme.discountSchemeId);\r\n        const deleteAction = deleteDiscountSchemeAsync(targetDiscountScheme.discountSchemeId);\r\n        dispatch(deleteAction);\r\n        setOpenDeleteDialog(false);\r\n    } \r\n\r\n    let httpResponseMessage: string = useSelector((action: RootState) => action.discountSchemeReducer.httpMessage as string) ?? \"\";\r\n    console.log(\"in ProductPage\", httpResponseMessage);\r\n    useEffect(() => {\r\n        if (httpResponseMessage.includes(ACTIONS.HTTP_DELETE_SUCCESS)) {\r\n            \r\n            const action = getDiscountSchemesWithBidOfProducer(producerId);\r\n            dispatch(action);\r\n        }\r\n    }, [httpResponseMessage]);\r\n\r\n    // Set the rows for the datatable\r\n    for (let ds of discountSchemes) {\r\n        let row: Row = createRowFromScheme(ds);\r\n        const onNameClick = () => {\r\n            let product: Product = discountSchemes\r\n                .map(ds => ds.product)\r\n                .find(product => product?.productId === ds.productId) ?? new Product();\r\n            setProduct(product);\r\n\r\n            setOpenProductDialog(!openProductDialog);\r\n        };\r\n        const onDeleteClick = () => {\r\n            setTargetDiscountScheme(ds);\r\n            setOpenDeleteDialog(true);\r\n        }\r\n\r\n        // Disallow deleting of schemes which have bids\r\n        const isDisableDelete: boolean = ds.bids.length > 0;\r\n        let tooltipMessage: string = isDisableDelete ? \"Cannot delete scheme as it has dependent bids\" : \"\";\r\n\r\n        row.name = <Button onClick={onNameClick} size=\"small\" variant=\"outlined\">{ds.product?.name}</Button> ;\r\n        row.delete = <div className=\"tooltip__div-visible\">\r\n            <Button size=\"small\" variant=\"outlined\" color=\"secondary\" disabled={isDisableDelete}\r\n                onClick={onDeleteClick}>Delete\r\n                    <span className=\"tooltiptext\">{tooltipMessage}</span>\r\n                </Button>\r\n        </div> ;\r\n        rows.push(row);\r\n    }\r\n\r\n    \r\n    const columnNames: string[] = [\"Name\", \"Discounted Price\", \"Delivery Charge\",  \"Min Order Qnty\", \"Current Bids\",\"Expiry Date\", \"Bid Status\", \"Delete\"];\r\n    const accessors: string[] = Object.keys(new Row());        \r\n\r\n    return <Container maxWidth=\"lg\">\r\n        <Grid container>\r\n            <Grid item xs={2}>\r\n                <SelectControlledComponent title=\"Status\" state={status} selectListItems={selectListItems} handleChange={handleStatusChange}  />\r\n            </Grid> \r\n            <Grid item xs={3}>\r\n            <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                options={products}\r\n                getOptionLabel={(option: Product) => option.name ?? \"\"}\r\n                style={{ width: 300 }}\r\n                onInputChange={(event, value) => handleChangeProductName(value)}\r\n                renderInput={(params) => <TextField {...params} label=\"Products\" variant=\"outlined\" />}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={5}></Grid>     \r\n            <Grid item xs={2}>\r\n                <Button onClick={redirectToForm} variant=\"contained\" color=\"primary\">\r\n                    Create Scheme\r\n                </Button>\r\n            </Grid>        \r\n        </Grid>\r\n        <br/>\r\n        <DataTable columnNames={columnNames} accessors={accessors} data={rows} title={\"Discount Schemes\"} enablePaging={true} pageSize={5} />\r\n        \r\n        <DialogComponent open={openProductDialog} toggleOpen={() => setOpenProductDialog(!openProductDialog)} \r\n            content={productTextComponent} showPicture />\r\n        <DialogComponent open={openDeleteDialog} toggleOpen={() => setOpenDeleteDialog(!openDeleteDialog)} content={<p>Confirm Delete?</p>}\r\n            secondaryAction={deleteProduct} secondaryActionTitle=\"Delete Product\"/>\r\n    </Container>\r\n}\r\n\r\nfunction createRowFromScheme(ds: DiscountScheme): Row {\r\n    let row: Row = new Row();\r\n    if (ds == null) {\r\n        return row;\r\n    }\r\n    \r\n    const discountedPrice = ds.discountedPrice;\r\n    const originalPrice = ds.product?.originalPrice;\r\n    row.discountedPrice = <span>${discountedPrice} <del>${originalPrice}</del></span>\r\n\r\n    const expiryDate: Date = new Date(ds.expiryDate as Date);\r\n    row.bidExpiryDate = expiryDate.toDateString();\r\n    row.deliveryCharge = \"$\" + ds.deliveryCharge;\r\n    row.currentBids =  ds.bids\r\n        .filter(bid => !bid.isInCart)\r\n        .reduce((accum, bid) => accum + bid.quantity, 0);\r\n\r\n    row.minOrderQnty = ds.minOrderQnty;\r\n    row.bidStatus = determineStatusOfScheme(ds);\r\n\r\n    return row;    \r\n}\r\n\r\nfunction determineStatusOfScheme(ds: DiscountScheme): Status {\r\n    const expiryDate: Date = new Date(ds.expiryDate as Date);\r\n\r\n    const isSchemeSuccess: boolean = ds.bids.some(bid => bid.bidSuccessDate != null);\r\n    const hasBidExpired: boolean = expiryDate < new Date();\r\n\r\n    if (isSchemeSuccess) {\r\n        return \"SUCCESS\"\r\n    } else if (!isSchemeSuccess && hasBidExpired ) {\r\n        return \"FAILED\";\r\n    } else {\r\n        return \"PENDING\";\r\n    }\r\n}","import { Action } from \"redux\";\r\nimport { Product } from \"../../models/Product\";\r\nimport { ThunkAction, ThunkDispatch } from \"redux-thunk\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\nimport { IErrorAction, errorAction } from \"../actions/errorAction\";\r\nimport { ApiError } from \"../../models/ApiError\";\r\nimport { InterceptorService } from \"../../services/InterceptorService\";\r\n\r\nexport interface IProductAction extends Action {\r\n    type: string;\r\n    product?: Product | undefined;\r\n    products?: Product[] | undefined;\r\n    message?: string;  \r\n    httpMessage?: string // For API messages\r\n}\r\n\r\nexport function getProductsAsync(producerId: number): ThunkAction<Promise<void>, {}, {}, IProductAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IProductAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.GET_PRODUCTS_REQUEST, message: \"Getting products of producer ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/products/producer/\" + producerId, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let products: Product[] = (await response.json());\r\n            dispatch({ type: ACTIONS.GET_PRODUCTS_RECEIVED, products: products, message: response.statusText,  httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function getProductAsync(productId: number): ThunkAction<Promise<void>, {}, {}, IProductAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IProductAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.GET_PRODUCT_REQUEST, message: \"Getting products of producer ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/products/\" + productId, {\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let product: Product = (await response.json());\r\n            console.log(\"In productThunk\", product)\r\n            dispatch({ type: ACTIONS.GET_PRODUCT_RECEIVED, product: product, message: response.statusText,  httpMessage: ACTIONS.HTTP_READ_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function createProductsAsync(product: Product): ThunkAction<Promise<void>, {}, {}, IProductAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IProductAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.GET_PRODUCTS_REQUEST, message: \"Creating product ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/products/\", {\r\n                method: \"POST\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(product)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                console.log(\"apiError in createProductAsync\", apiError);\r\n                throw apiError;\r\n            }\r\n            \r\n            let createdProduct: Product = (await response.json());\r\n            dispatch({ type: ACTIONS.GET_PRODUCTS_RECEIVED, product: createdProduct, message: response.statusText,  httpMessage: ACTIONS.HTTP_CREATE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function updateProductAsync(productId: number, product: Product): ThunkAction<Promise<void>, {}, {}, IProductAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IProductAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.UPDATE_PRODUCT_REQUEST, message: \"Updating product ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/products/\" + productId, {\r\n                method: \"PUT\",\r\n                headers: InterceptorService.getAuthHeader(),\r\n                body: JSON.stringify(product)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let updatedProduct: Product = (await response.json());\r\n            console.log(\"updatedProduct\", updatedProduct);\r\n            dispatch({ type: ACTIONS.GET_PRODUCTS_RECEIVED, product: updatedProduct, message: response.statusText,  httpMessage: ACTIONS.HTTP_UPDATE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n\r\nexport function deleteProductAsync(productId: number): ThunkAction<Promise<void>, {}, {}, IProductAction | IErrorAction> {\r\n    return async (dispatch: ThunkDispatch<{}, {}, IProductAction | IErrorAction>) => {\r\n        dispatch({ type: ACTIONS.DELETE_PRODUCT_REQUEST, message: \"Deleting product ...\" });\r\n\r\n        try {\r\n            const response: Response = await fetch(\"https://localhost:44397/api/products/\" + productId, {\r\n                method: \"DELETE\",\r\n                headers: InterceptorService.getAuthHeader()\r\n            });\r\n\r\n            if (!response.ok) {\r\n                let apiError: ApiError = await response.json();\r\n                throw apiError;\r\n            }\r\n            \r\n            let deletedProduct: Product = (await response.json());\r\n            console.log(\"deletedProduct\", deletedProduct);\r\n            dispatch({ type: ACTIONS.DELETE_PRODUCT_RECEIVED, product: deletedProduct, message: response.statusText,  httpMessage: ACTIONS.HTTP_DELETE_SUCCESS });\r\n        } catch(error) {\r\n            dispatch(errorAction(ACTIONS.ERROR, error));\r\n        }        \r\n        \r\n    }\r\n}\r\n","import React from \"react\";\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\r\nimport { v4 as guid } from 'uuid';\r\nimport { Control, Controller, DeepMap, FieldError } from \"react-hook-form\";\r\n\r\ninterface IPropUncontrolled {\r\n    label: string,\r\n    name: string,\r\n    errorMessage?: string,\r\n    defaultValue?: string,\r\n    control: Control<Record<string, any>>,\r\n    errors: DeepMap<Record<string, any>, FieldError>,\r\n    rules?: object\r\n}\r\n\r\nexport function DatePickerUncontrolledComponent({ control, errors, label, name, defaultValue=\"\", errorMessage=\"\", rules={}}: IPropUncontrolled): JSX.Element {\r\n    let isError: boolean = errors[name] != null;\r\n    let helperText: string = isError ? errorMessage : \"\";\r\n    return <Controller\r\n        name={name}\r\n        defaultValue={defaultValue}\r\n        control={control}\r\n        rules={rules}\r\n        render={props => <DatePickerControlledComponent {...props} label={label} error={isError} helperText={helperText} />} // props contains: onChange, onBlur and value\r\n    />  \r\n}\r\n\r\ninterface IPropControlled {\r\n    onChange: () => void;\r\n    label: string;\r\n    value: Date;\r\n    error?: boolean;\r\n    helperText?: string\r\n}\r\n\r\nexport function DatePickerControlledComponent({label, onChange, value, error=false, helperText=\"\"}: IPropControlled): JSX.Element {\r\n\r\n    if (!value) {\r\n        value = new Date();\r\n    }\r\n    return <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <KeyboardDatePicker\r\n            error={error}\r\n            helperText={helperText}\r\n            disableToolbar\r\n            variant=\"inline\"\r\n            format=\"dd/MM/yyyy\"\r\n            margin=\"normal\"\r\n            id={guid()}\r\n            label={label}\r\n            value={value }\r\n            onChange={onChange}\r\n            KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n            }} />\r\n    </MuiPickersUtilsProvider>\r\n}","import React, { useEffect } from \"react\";\r\nimport { Container, Grid, TextField } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { Product } from \"../models/Product\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { getProductsAsync } from \"../store/thunks/productThunk\";\r\nimport { SelectListItem } from \"../models/SelectListItem\";\r\nimport { DatePickerUncontrolledComponent } from \"../components/DatePickerComponent\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { TextFieldUncontrolledComponent } from \"../components/TextFieldComponents\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { DiscountScheme } from \"../models/DiscountScheme\";\r\nimport { TextComponent } from \"../components/TextComponent\";\r\nimport { createDiscountSchemeAsync } from \"../store/thunks/discountSchemeThunk\";\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nenum FORM_NAMES {\r\n    productId = \"productId\",\r\n    discountedPrice = \"discountedPrice\",\r\n    minOrderQnty = \"minOrderQnty\",\r\n    deliveryCharge = \"deliveryCharge\",\r\n    expiryDate = \"expiryDate\"\r\n}\r\n\r\nexport function DiscountSchemeForm(): JSX.Element {\r\n    document.title = \"Create Discount Scheme\";\r\n\r\n    const dispatch: Dispatch<any> = useDispatch(); \r\n    const history = useHistory();  \r\n\r\n    const products: Product[] = useSelector((action: RootState) => action.productReducer.products as Product[] ) ?? [];  \r\n\r\n    let selectListItems: SelectListItem[] = products.map(product => new SelectListItem(product.name, product.productId));\r\n\r\n    useEffect(() => {\r\n        const producerId: number = 2;\r\n        const action = getProductsAsync(producerId);\r\n        dispatch(action);\r\n    }, []);  \r\n\r\n    // React hook form - uncontrolled state that uses useRef behind the scenes\r\n    const { errors, handleSubmit, control, getValues, watch } = useForm();    \r\n\r\n    const watchProductId: number = watch(FORM_NAMES.productId, 0);\r\n    const selectedProduct: Product = products.find(product => product.productId === watchProductId) ?? new Product();\r\n    const productTextDict: Record<string, any> = {\r\n        \"Original Price\": \"$\" + selectedProduct.originalPrice,\r\n        \"Description\": selectedProduct.description\r\n    }\r\n    console.log(\"watchProductId\", watchProductId);    \r\n\r\n    const onSubmit = (data: any) => {\r\n        //console.log(data, errors);\r\n        const {productId, discountedPrice, minOrderQnty, deliveryCharge, expiryDate} = getValues([FORM_NAMES.productId, FORM_NAMES.discountedPrice, \r\n            FORM_NAMES.minOrderQnty, FORM_NAMES.deliveryCharge, FORM_NAMES.expiryDate]);\r\n        const discountScheme: DiscountScheme = createDiscountScheme(productId, minOrderQnty, discountedPrice, expiryDate, deliveryCharge);\r\n        const action = createDiscountSchemeAsync(discountScheme);\r\n        dispatch(action);\r\n    }   \r\n\r\n    // If create is successful, redirect\r\n    const apiMessage: string = useSelector( (action: RootState) => action.discountSchemeReducer.httpMessage as string ) ?? \"\"; \r\n    useEffect(() => {\r\n        if (apiMessage.includes(ACTIONS.HTTP_CREATE_SUCCESS)) {\r\n            history.push(\"/producer/discountSchemes\");\r\n        }\r\n    }, [apiMessage]);\r\n\r\n    // Redirect to product form if user decides to create new product\r\n    const redirectToProductForm = () => history.push(\"/producer/product/\" + \"0\");\r\n\r\n    return <Container maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            \r\n            <Grid container justify=\"flex-start\">\r\n                <Grid item xs={4}>\r\n                    <Controller                     \r\n                        control={control}\r\n                        name={FORM_NAMES.productId}                \r\n                        rules={{\"required\": true }}\r\n                        render={({onChange}: any) =>  <Autocomplete\r\n                                id=\"combo-box-demo\"\r\n                                options={products}\r\n                                getOptionLabel={(option: Product) => option.name ?? \"\"}\r\n                                style={{ width: 300 }} \r\n                                onChange={(event: any, data) => onChange((data as Product).productId)}                                \r\n                                renderInput={(params) => <TextField {...params} label=\"Products\" variant=\"outlined\" />}  \r\n                                />\r\n                        }\r\n                    />\r\n                    {errors[\"productId\"] &&\r\n                        <p style={{fontSize: \"14px\", color: \"red\", textAlign: \"left\"}}>Product is required</p>                                            \r\n                    }\r\n                \r\n                    {/* <SelectUncontrolledComponent title={\"Choose Product\"} selectListItems={selectListItems} name={FORM_NAMES.productId} errorMessage=\"Scheme is required\"\r\n                        control={control} errors={errors} rules={{required: true}} /> */}\r\n                </Grid>                \r\n                <Grid item xs={3} alignItems=\"flex-end\">\r\n                    <Button onClick={redirectToProductForm} variant=\"outlined\" size=\"small\" style={{bottom: \"-30%\"}} >Or create one</Button>\r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n                { watchProductId > 0 &&\r\n                    <Grid item xs={12}>\r\n                        <TextComponent textDict={productTextDict}  color={\"textSecondary\"} />\r\n                    </Grid>\r\n                }\r\n                <EmptyGridRow />\r\n\r\n                <Grid item xs={12}>\r\n                    <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.discountedPrice} label={\"Discounted Price\"} errorMessage={\"Discounted Price is required\"} \r\n                        rules={{required: true, min: 1}} adornment={\"$\"} />\r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n                <Grid item xs={12}>\r\n                    <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.minOrderQnty} label={\"Minimum order quantity\"} errorMessage={\"Minimum order quantity is required\"} \r\n                        rules={{required: true, min: 1}} />\r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n                <Grid item xs={12}>\r\n                    <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.deliveryCharge} label={\"Delivery Charge\"} errorMessage={\"Delivery Charge is required\"} \r\n                        rules={{required: true, min: 1}} adornment={\"$\"} />        \r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n                <Grid item xs={2}>\r\n                    <DatePickerUncontrolledComponent label={\"Expiry Date\"} name={FORM_NAMES.expiryDate} \r\n                        control={control} errors={errors} rules={{required: true}} errorMessage={\"Expiry Date is required\"} />\r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n                <Grid item xs={12}>\r\n                    <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                        Submit\r\n                    </Button> \r\n                </Grid>\r\n                <EmptyGridRow />\r\n\r\n            </Grid>            \r\n                        \r\n        </form>\r\n    </Container>\r\n}\r\n\r\nfunction createDiscountScheme(productId: number, minOrderQnty: number, discountedPrice: number, expiryDate: Date, deliveryCharge: number): DiscountScheme {\r\n    let discountScheme: DiscountScheme = new DiscountScheme();\r\n    discountScheme.productId = productId;\r\n    discountScheme.minOrderQnty = minOrderQnty;\r\n    discountScheme.discountedPrice = discountedPrice;\r\n    discountScheme.expiryDate = expiryDate;\r\n    discountScheme.deliveryCharge = deliveryCharge;\r\n\r\n    return discountScheme;\r\n}\r\n\r\nfunction EmptyGridRow(): JSX.Element {\r\n    return <Grid item xs={12}><br/></Grid>;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { TextFieldUncontrolledComponent } from \"../components/TextFieldComponents\";\r\nimport { Product } from \"../models/Product\";\r\nimport { createProductsAsync, getProductAsync, updateProductAsync } from \"../store/thunks/productThunk\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\nimport { useState } from \"react\";\r\nimport { SnackbarComponent } from \"../components/SnackbarComponent\";\r\n\r\nenum FORM_NAMES {\r\n    productId = \"productId\",\r\n    name = \"name\",\r\n    category = \"category\",\r\n    description = \"description\",\r\n    originalPrice = \"originalPrice\"\r\n}\r\n\r\ntype FORM_DATA = {\r\n    \"productId\" : number,\r\n    \"name\": string;\r\n    \"category\": string;\r\n    \"description\": string;\r\n    \"originalPrice\": number;\r\n}\r\n\r\n\r\n// User can either Create or Update the product\r\ntype MODE = \"CREATE\" | \"UPDATE\";\r\n\r\nexport function ProductForm(): JSX.Element {\r\n    document.title = \"Product Form\";\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const history = useHistory();\r\n\r\n    // If creating, route param is set to 0. If update, route param is set to existing productId\r\n    let routeParams: Record<string, string>  = (useParams()) as Record<string, string>;    \r\n    const productId: number = parseInt(routeParams[\"productId\"]); \r\n    const mode: MODE = productId === 0 ? \"CREATE\" : \"UPDATE\";\r\n\r\n    let productToUpdate: Product = useSelector((action: RootState) => action.productReducer.product as Product ) ?? new Product();\r\n\r\n    useEffect(() => {\r\n        if (mode === \"UPDATE\") {\r\n            const action = getProductAsync(productId);\r\n            dispatch(action);\r\n        }   \r\n    }, [productId]);   \r\n\r\n    const { errors, handleSubmit, control, getValues, reset, setValue } = useForm<FORM_DATA>(); \r\n\r\n    useEffect(() => {\r\n        if (mode === \"UPDATE\") {\r\n            setValue(FORM_NAMES.productId, productToUpdate.productId);\r\n            setValue(FORM_NAMES.name, productToUpdate.name);\r\n            setValue(FORM_NAMES.category, productToUpdate.category);\r\n            setValue(FORM_NAMES.description, productToUpdate.description);\r\n            setValue(FORM_NAMES.originalPrice, productToUpdate.originalPrice);\r\n        }\r\n    }, [JSON.stringify(productToUpdate)])\r\n    \r\n    \r\n\r\n    const onSubmit = (data: any) => {\r\n\r\n        const {productId, name, category, description, originalPrice} = data;        \r\n        //getValues([FORM_NAMES.productId, FORM_NAMES.name, FORM_NAMES.category, FORM_NAMES.description, FORM_NAMES.originalPrice]);\r\n        const product = initializeProduct(productId, name, category, description, originalPrice);\r\n        console.log(\"submitting product\", product);\r\n        if (mode === \"CREATE\") {\r\n            const action = createProductsAsync(product);\r\n            dispatch(action);\r\n            reset({});\r\n        } else if (mode === \"UPDATE\") {\r\n            product.producerId = productToUpdate.producerId;\r\n            const action = updateProductAsync(productId, product);\r\n            dispatch(action);\r\n            //reset(product);\r\n        }                \r\n    };\r\n    \r\n    const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\r\n    const apiMessage: string = useSelector( (action: RootState) => action.productReducer.httpMessage as string ) ?? \"\"; \r\n    useEffect(() => {\r\n        if (apiMessage.includes(ACTIONS.HTTP_CREATE_SUCCESS) || apiMessage.includes(ACTIONS.HTTP_UPDATE_SUCCESS)) {\r\n            setOpenSnackbar(true);\r\n        }        \r\n    }, [apiMessage]);\r\n\r\n    return <Container maxWidth=\"md\">\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <GridRow display=\"none\" component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.productId} label={\"Product Id\"} \r\n                    rules={{required: false}}  />\r\n            }/>\r\n            \r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.name} label={\"Name\"} \r\n                    rules={{required: true}} errorMessage=\"Name is required\" />\r\n            }/>\r\n\r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.originalPrice} label={\"Original Price\"} \r\n                    rules={{required: true, min: 1}} adornment={\"$\"} errorMessage=\"Original Price is required\" />\r\n            } />\r\n\r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.category} label={\"Category\"} \r\n                    rules={{required: false}} />\r\n            }/>\r\n\r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.description} label={\"Description\"} \r\n                    rules={{required: false}}  />\r\n            }/>                          \r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button> \r\n\r\n        </form>\r\n        <SnackbarComponent open={openSnackbar} setOpen={setOpenSnackbar} severity={\"success\"} message={mode + \" is successful!\"}/>\r\n    </Container>\r\n}\r\n\r\ninterface IRowProp {\r\n    component: JSX.Element,\r\n    display?: \"initial\" | \"none\"\r\n}\r\nfunction GridRow({component, display=\"initial\"}: IRowProp): JSX.Element {\r\n    return <div>\r\n        <Grid item xs={12} style={{display: display}}>\r\n            {component}\r\n        </Grid>\r\n        <Grid item xs={12}><br/></Grid>\r\n    </div>;\r\n}\r\n\r\nfunction initializeProduct(productId: number, name: string, category: string, description: string, originalPrice: number): Product {\r\n    let product: Product = new Product();\r\n    product.productId = productId > 0 ? productId : 0;  //When creating product, productId is set to null from react hook form\r\n    product.name = name;\r\n    product.category = category;\r\n    product.description = description;\r\n    product.originalPrice = originalPrice;\r\n    product.producerId = 2;\r\n    return product;\r\n}\r\n ","import React from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, Control, DeepMap, FieldError } from \"react-hook-form\";\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\ninterface IProp {\r\n    label: string,\r\n    name: string,\r\n    errorMessage?: string,\r\n    defaultValue?: string,\r\n    control: Control<Record<string, any>>,\r\n    errors: DeepMap<Record<string, any>, FieldError>,\r\n    rules: object,\r\n    isFullWidth?: boolean,\r\n    adornment?: string | null,\r\n    variant?: \"outlined\" | \"filled\" | \"standard\",\r\n    type?: \"text\" | \"number\" | \"password\"\r\n}\r\n\r\nexport function TextFieldUncontrolledComponent({ label, name, defaultValue=\"\", \r\n    isFullWidth=false, variant=\"standard\", type=\"text\",\r\n    adornment=null,\r\n    control, errors, \r\n    errorMessage=\"\", rules={}}: IProp): JSX.Element {\r\n    console.log(\"errors\", errors);\r\n    let isError: boolean = errors[name] != null;\r\n    let helperText: string = isError ? errorMessage : \"\";\r\n\r\n    return <div>\r\n        <Controller\r\n            name={name}\r\n            defaultValue={defaultValue}\r\n            control={control}\r\n            rules={rules}\r\n            render={props => <TextField {...props} label={label} error={isError} helperText={helperText} \r\n                fullWidth={isFullWidth} variant={variant} type={type}\r\n                InputProps={{\r\n                    startAdornment: adornment ? <InputAdornment position=\"start\">{adornment}</InputAdornment> : null\r\n                }}\r\n            />} \r\n        />  \r\n    </div> \r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Product } from \"../models/Product\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { deleteProductAsync, getProductsAsync } from \"../store/thunks/productThunk\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { Container, Grid } from \"@material-ui/core\";\r\nimport { DialogComponent } from \"../components/DialogComponent\";\r\nimport { DataTable } from \"../components/DataTable\";\r\nimport \"./toolTip.css\";\r\nimport { ACTIONS } from \"../store/actionEnums\";\r\n\r\n\r\nclass Row {\r\n    name: string | undefined;\r\n    originalPrice: string | undefined;\r\n    category: string | undefined;\r\n    description: string | undefined;\r\n    update: JSX.Element | undefined;\r\n    delete: JSX.Element | undefined;\r\n}\r\n\r\nexport function ProductsPage(): JSX.Element {\r\n    document.title = \"Products\";\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const history = useHistory(); \r\n    const producerId = 2;\r\n\r\n    const products: Product[] = useSelector((action: RootState) => action.productReducer.products as Product[]) ?? [];\r\n    useEffect(() => {\r\n        \r\n        const action = getProductsAsync(producerId);\r\n        dispatch(action);        \r\n    }, []);\r\n\r\n    const columnNames: string[] = [\"Name\", \"Original Price\", \"Category\",  \"Description\", \"Update\",\"Delete\"];\r\n    const accessors: string[] = Object.keys(new Row());\r\n    const rows: Row[] = [];\r\n\r\n    // When user clicks delete in the opened product dialog, confirm delete\r\n    const [openDeleteDialog, setOpenDeleteDialog] = useState<boolean>(false); \r\n\r\n    const [targetProduct, setTargetProduct] = useState<Product>(new Product());\r\n    const deleteProduct = () => {\r\n        console.log(\"productId\", targetProduct.productId);\r\n        if (targetProduct.discountSchemes.length > 0) {\r\n            return;\r\n        }\r\n        const action = deleteProductAsync(targetProduct.productId);\r\n        dispatch(action);\r\n        setOpenDeleteDialog(false);\r\n    } \r\n\r\n    let httpResponseMessage: string = useSelector((action: RootState) => action.productReducer.httpMessage as string);\r\n    useEffect(() => {\r\n        if (httpResponseMessage.includes(ACTIONS.HTTP_DELETE_SUCCESS)) {\r\n            console.log(\"in productsPage\", httpResponseMessage);\r\n            const action = getProductsAsync(producerId);\r\n            dispatch(action);\r\n        }\r\n    }, [httpResponseMessage]); \r\n\r\n    for (let i = 0; i < products.length; i++) {\r\n        let product: Product = products[i];\r\n        let row: Row = createRow(product);\r\n\r\n        const updateProduct = () => history.push(\"/producer/product/\" + product.productId);\r\n        const onDeleteClick = () => {\r\n            setOpenDeleteDialog(true);\r\n            setTargetProduct(product);\r\n        }\r\n\r\n        // If product already has schemes, disallow delete\r\n        const isDisableDelete: boolean = product.discountSchemes.length > 0;\r\n        let tooltipMessage: string = isDisableDelete ? \"Cannot delete product as it has dependent discount schemes\" : \"\";\r\n\r\n        row.update = <Button size=\"small\" variant=\"outlined\" onClick={updateProduct}>Update</Button>\r\n        row.delete = <div className=\"tooltip__div-visible\">\r\n            <Button color=\"secondary\" size=\"small\" variant=\"outlined\"  \r\n                disabled={isDisableDelete} \r\n                onClick={onDeleteClick}>Delete\r\n                <span className=\"tooltiptext\">{tooltipMessage}</span>\r\n            </Button> \r\n        </div> \r\n        rows.push(row);\r\n    }    \r\n\r\n    const redirectToProductForm = () => history.push(\"/producer/product/\" + 0);\r\n\r\n    return <Container>\r\n        <Grid container>\r\n            <Grid item xs={10}></Grid>\r\n            <Grid item xs={2}>\r\n                <Button variant=\"contained\" onClick={redirectToProductForm} color=\"primary\">Create Product</Button>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item xs={12}><br/></Grid>\r\n        <DataTable columnNames={columnNames} accessors={accessors} data={rows} title={\"Products\"} enablePaging={true} pageSize={5} />\r\n        <DialogComponent open={openDeleteDialog} toggleOpen={() => setOpenDeleteDialog(!openDeleteDialog)} content={<p>Confirm Delete?</p>}\r\n            secondaryAction={deleteProduct} secondaryActionTitle=\"Delete Product\"/>\r\n    </Container>\r\n}\r\n\r\nfunction createRow(product: Product): Row {\r\n    let row: Row = new Row();\r\n    row.name = product.name;\r\n    row.originalPrice = \"$\" + product.originalPrice;\r\n    row.category = product.category;\r\n    row.description = product.description;\r\n    return row;\r\n}","export class IdentityUser {\r\n    userName: string = \"\";\r\n    passwordHash: string = \"\";\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Container, Grid } from \"@material-ui/core\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { TextFieldUncontrolledComponent } from \"../components/TextFieldComponents\";\r\nimport { IdentityUser } from \"../models/IdentityUser\";\r\nimport { loginAsync } from \"../store/thunks/authThunk\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Dispatch } from \"redux\"; \r\nimport { AuthVM } from \"../models/AuthVM\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { SnackbarComponent } from \"../components/SnackbarComponent\"; \r\n\r\nenum FORM_NAMES {\r\n    userName = \"userName\",\r\n    passwordHash = \"passwordHash\"\r\n}\r\n\r\ntype FORM_DATA = {\r\n    \"userName\" : string,\r\n    \"passwordHash\": string;\r\n}\r\n\r\n\r\nexport function LoginForm(): JSX.Element {\r\n    document.title = \"Login\";\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const history = useHistory();\r\n\r\n    let [openSnackBar, setOpenSnackBar] = useState<boolean>(false);\r\n\r\n    let defaultAuthVM = new AuthVM();\r\n    defaultAuthVM.isAuthenticated = \"UNTOUCHED\";\r\n\r\n    let authVM: AuthVM = useSelector((action: RootState) => action.authReducer.authVM) ?? defaultAuthVM;\r\n\r\n    useEffect(() => { \r\n        if (authVM.isAuthenticated === \"UNTOUCHED\") {\r\n            return;\r\n        }\r\n\r\n        if (authVM.isAuthenticated) {\r\n            history.push(\"\");\r\n        } else {\r\n            setOpenSnackBar(true);\r\n        }\r\n    }, [authVM.isAuthenticated]);\r\n  \r\n\r\n    const { errors, handleSubmit, control } = useForm<FORM_DATA>(); \r\n\r\n    const onSubmit = (data: FORM_DATA) => {\r\n        console.log(data);\r\n        let identityUser: IdentityUser = new IdentityUser();\r\n        identityUser.userName = data.userName;\r\n        identityUser.passwordHash = data.passwordHash;\r\n\r\n        const action = loginAsync(identityUser);\r\n        dispatch(action);\r\n\r\n    }\r\n\r\n    return <Container>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.userName} label={\"UserName\"} \r\n                    variant=\"outlined\"\r\n                    rules={{required: true}} errorMessage=\"Name is required\" />\r\n            }/>\r\n            \r\n            <GridRow component={\r\n                <TextFieldUncontrolledComponent isFullWidth={true} control={control} errors={errors} name={FORM_NAMES.passwordHash} label={\"Password\"} \r\n                    variant=\"outlined\" type=\"password\"\r\n                    rules={{required: true}} errorMessage=\"Password is required\" />\r\n            }/>\r\n                        \r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Submit\r\n            </Button> \r\n\r\n        </form>\r\n        <SnackbarComponent open={openSnackBar} setOpen={setOpenSnackBar} message=\"Authentication failed\" severity=\"error\"/>\r\n    </Container>\r\n}\r\n\r\ninterface IRowProp {\r\n    component: JSX.Element,\r\n    display?: \"initial\" | \"none\"\r\n}\r\n\r\nfunction GridRow({component, display=\"initial\"}: IRowProp): JSX.Element {\r\n    return <div>\r\n        <Grid item xs={12}>\r\n            {component}\r\n        </Grid>\r\n        <Grid item xs={12}><br/></Grid>\r\n    </div>;\r\n}","import { Container } from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\nexport function ErrorPage(): JSX.Element {\r\n    return <Container>\r\n        <h2>An error occured</h2>\r\n    </Container>\r\n}","import { Container } from \"@material-ui/core\";\r\nimport React, { Fragment, FunctionComponent, useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NavLink, Route, useHistory } from 'react-router-dom';\r\nimport { ErrorPage } from \"../containers/ErrorPage\";\r\nimport { AuthVM } from \"../models/AuthVM\";\r\nimport { RootState } from \"../store/rootReducer\";\r\nimport { SnackbarComponent } from \"./SnackbarComponent\";\r\n\r\ninterface IProp {\r\n    component: FunctionComponent;\r\n    path: string;\r\n    requiredClaims?: string[];\r\n}\r\n\r\nexport function PrivateRoute({component, path, requiredClaims=[]}: IProp): JSX.Element {    \r\n\r\n    let authVM: AuthVM = new AuthVM();\r\n\r\n    if (localStorage.getItem(\"authVM\")) {\r\n        authVM = JSON.parse(localStorage.getItem(\"authVM\") as string);\r\n    }\r\n     \r\n    let isAuthenticated: boolean = authVM.isAuthenticated === true ? true : false;\r\n    let claims: string[] = authVM.claims;\r\n    let history = useHistory();\r\n\r\n    if (!isAuthenticated) {\r\n        console.log(\"not authenticated\");\r\n        history.push(\"/login\");\r\n    }\r\n\r\n    let [openSnackBar, setOpenSnackBar] = useState<boolean>(false);\r\n\r\n    let isAuthorized: boolean = requiredClaims.every(requiredClaim => claims.includes(requiredClaim));\r\n\r\n    let linkToLoginForm: JSX.Element = <Fragment>\r\n        <span>Not Authorized </span>\r\n        <NavLink to=\"/login\" style={{color: \"white\"}}><b>Click here to login</b></NavLink>\r\n    </Fragment> \r\n\r\n    useEffect(() => {\r\n        if (!isAuthorized) {\r\n            console.log(\"not authorized\");\r\n            setOpenSnackBar(true);\r\n            return;\r\n            // history.push(\"/login\");\r\n        }\r\n    }, [isAuthorized]);\r\n\r\n    \r\n\r\n    return <Fragment>\r\n        {  isAuthorized\r\n            ? <Route path={path} component= { component } />\r\n            : <ErrorPage />\r\n        }        \r\n        <SnackbarComponent open={openSnackBar} setOpen={setOpenSnackBar} message={linkToLoginForm} severity=\"warning\" autoHideDuration={10000}/>\r\n    </Fragment>\r\n     \r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { DiscountSchemesPage } from './containers/DiscountSchemesPage';\r\nimport { NavBar } from './components/NavBar';\r\nimport { Route } from 'react-router-dom';\r\nimport { Switch, BrowserRouter as Router } from 'react-router-dom';\r\nimport { DiscountSchemeDetailHOC } from './containers/DiscountSchemeDetailHOC';\r\nimport { CartPage } from './containers/CartPage';\r\nimport { OrdersPage } from './containers/OrdersPage';\r\nimport { ProducerDiscountSchemePage } from './containers/ProducerDiscountSchemePage';\r\nimport { DiscountSchemeForm } from './containers/DiscountSchemeForm';\r\nimport { ProductForm } from './containers/ProductForm';\r\nimport { ProductsPage } from './containers/ProductsPage';\r\nimport { LoginForm } from './containers/LoginForm';\r\nimport { PrivateRoute } from './components/PrivateRoute';\r\nimport { AuthContext } from './contexts/AuthContext';\r\nimport { AuthVM, Claims } from './models/AuthVM';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <NavBar/>\r\n          <Switch>\r\n            {/* Public Paths */}\r\n            <Route path=\"/login\" component={ LoginForm } />\r\n            <Route exact path=\"/\" component={ DiscountSchemesPage } />\r\n\r\n            {/* Consumer paths */}\r\n            <PrivateRoute path=\"/discountScheme/:discountSchemeId\" component= { DiscountSchemeDetailHOC } requiredClaims={[Claims.CONSUMER]} />\r\n            <PrivateRoute path=\"/cart\" component= { CartPage } requiredClaims={[Claims.CONSUMER]} />\r\n            <PrivateRoute path=\"/orders\" component= { OrdersPage } requiredClaims={[Claims.CONSUMER]} />\r\n\r\n            {/* Producer paths */}\r\n            <PrivateRoute path=\"/producer/products\" component = { ProductsPage } requiredClaims={[Claims.PRODUCER]} />\r\n            <PrivateRoute path=\"/producer/product/:productId\" component = { ProductForm } requiredClaims={[Claims.PRODUCER]} />            \r\n            <PrivateRoute path=\"/producer/discountSchemes/create\" component = { DiscountSchemeForm } requiredClaims={[Claims.PRODUCER]} />\r\n            <PrivateRoute path=\"/producer/discountSchemes\" component = { ProducerDiscountSchemePage } requiredClaims={[Claims.PRODUCER]} />\r\n          </Switch>\r\n        </Router> \r\n      </div>    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ACTIONS } from \"../actionEnums\";\r\nimport {cloneDeep} from 'lodash';\r\nimport { DiscountScheme } from \"../../models/DiscountScheme\";\r\nimport { IDiscountSchemeAction } from \"../thunks/discountSchemeThunk\";\r\n\r\nconst initialState : IDiscountSchemeAction = {\r\n    type: \"\",\r\n    discountSchemes: null\r\n}\r\n\r\nexport default function discountSchemeReducer(prevState = initialState, action: IDiscountSchemeAction): IDiscountSchemeAction {\r\n    let newState: IDiscountSchemeAction = cloneDeep(prevState);\r\n    newState.type = action.type;\r\n    newState.message = `${action.message} ${(new Date())}`;\r\n    newState.httpMessage = `${action.httpMessage} ${new Date()}`;\r\n    console.log(\"in discountSchemeReducer\", newState.httpMessage);\r\n\r\n    switch(action.type) {        \r\n        case(ACTIONS.GET_DISCOUNTSCHEMES_REQUEST):\r\n            console.log(action.message);\r\n            return newState;\r\n        case(ACTIONS.GET_DISCOUNTSCHEMES_RECEIVED):\r\n            console.log(\"GET_DISCOUNTSCHEMES_RECEIVED\");\r\n            let discountSchemes: DiscountScheme[] = action.discountSchemes as DiscountScheme[];\r\n            newState.discountSchemes = discountSchemes;\r\n            return newState;\r\n        case(ACTIONS.GET_DISCOUNTSCHEME_REQUEST):\r\n            console.log(action.message);\r\n            return newState;\r\n        case(ACTIONS.GET_DISCOUNTSCHEME_RECEIVED):\r\n            console.log(\"ACTIONS.GET_DISCOUNTSCHEME_RECEIVED\")\r\n            const discountScheme: DiscountScheme = action.discountScheme as DiscountScheme;\r\n            newState.discountScheme = discountScheme;\r\n            return newState;\r\n        case(ACTIONS.GET_DISCOUNTSCHEME_OF_PRODUCER_REQUEST):\r\n            console.log(action.message);\r\n            return newState;\r\n        case(ACTIONS.GET_DISCOUNTSCHEME_OF_PRODUCER_RECEIVED):\r\n            console.log(action.discountSchemes);\r\n            newState.discountSchemes = action.discountSchemes as DiscountScheme[];\r\n            return newState;\r\n        case(ACTIONS.CREATE_DISCOUNTSCHEME_REQUEST):\r\n            console.log(action.message);           \r\n            return newState;\r\n        case(ACTIONS.CREATE_DISCOUNTSCHEME_RECEIVED):\r\n            newState.discountScheme = action.discountScheme as DiscountScheme;\r\n            return newState;\r\n        case(ACTIONS.DELETE_DISCOUNTSCHEME_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.DELETE_DISCOUNTSCHEME_RECEIVED):\r\n            newState.discountScheme = action.discountScheme;\r\n            return newState;\r\n        default:\r\n            return prevState;\r\n    }\r\n    \r\n}","import { IBidAction } from \"../thunks/bidThunk\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\n\r\nconst initialState : IBidAction = {\r\n    type: \"\",\r\n    bid: undefined,\r\n    bids: undefined,\r\n    message: \"Initial Message\",\r\n    httpMessage: \"Initial Response Message\",        \r\n}\r\n\r\nexport default function bidReducer(prevState = initialState, action: IBidAction): IBidAction {\r\n    let newState: IBidAction = cloneDeep(prevState);\r\n    \r\n    newState.type = action.type;\r\n    newState.message = `${action.message} ${(new Date())}`;\r\n    newState.httpMessage = `${action.httpMessage} + ${new Date()}`;\r\n\r\n    //console.log(\"in bidReducer. Latest message\", newState.message);\r\n    //console.log(\"in bidReducer. Latest api message\", newState.httpMessage);\r\n \r\n    switch(action.type) {    \r\n        case(ACTIONS.ADD_BID_TO_CART_REQUEST):\r\n            return newState;    \r\n        case(ACTIONS.ADD_BID_TO_CART_RECEIVED): \r\n            newState.bid = action.bid;\r\n            return newState;\r\n        case(ACTIONS.GET_BIDSOFCUSTOMER_INCART_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.GET_BIDSOFCUSTOMER_INCART_RECEIVED):\r\n            newState.bids = action.bids;\r\n            console.log(newState.bids);\r\n            return newState;\r\n        case(ACTIONS.ADD_BID_TO_CART_REQUEST):\r\n            return newState;    \r\n        case(ACTIONS.UPDATE_BID_IN_CART_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.UPDATE_BID_IN_CART_RECEIVED):\r\n            return newState;\r\n        case(ACTIONS.DELETE_BID_IN_CART_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.DELETE_BID_IN_CART_RECEIVED):\r\n            return newState;\r\n        case(ACTIONS.ORDER_BIDS_IN_CART_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.ORDER_BIDS_IN_CART_RECEIVED):\r\n            return newState;\r\n        case(ACTIONS.GET_PENDING_OR_SUCCESSFUL_BIDS_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.GET_PENDING_OR_SUCCESSFUL_BIDS_RECEIVED):\r\n            newState.bids = action.bids;\r\n            return newState;\r\n        default:\r\n            return prevState;\r\n    }\r\n    \r\n}","import { IProductAction } from \"../thunks/productThunk\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\n\r\nconst initialState: IProductAction = {\r\n    type: \"\",\r\n    product: undefined,\r\n    products: undefined,\r\n    message: \"\",\r\n    httpMessage: \"\" // For API messages\r\n}\r\n\r\nexport default function productReducer(prevState = initialState, action: IProductAction): IProductAction {\r\n\r\n    let newState: IProductAction = cloneDeep(prevState);\r\n    \r\n    newState.type = action.type;\r\n    newState.message = `${action.message} ${(new Date())}`;\r\n    newState.httpMessage = `${action.httpMessage} + ${new Date()}`;\r\n\r\n    console.log(\"in productReducer. Latest message\", newState.message);\r\n    console.log(\"in productReducer. Latest api message\", newState.httpMessage);\r\n\r\n    switch(action.type) {\r\n        case(ACTIONS.GET_PRODUCTS_REQUEST):\r\n            return newState;\r\n        case (ACTIONS.GET_PRODUCTS_RECEIVED):\r\n            newState.products = action.products;\r\n            return newState;\r\n        case(ACTIONS.CREATE_PRODUCT_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.CREATE_PRODUCT_RECEIVED):\r\n            newState.product = action.product;\r\n            return newState;\r\n        case(ACTIONS.GET_PRODUCT_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.GET_PRODUCT_RECEIVED):\r\n            newState.product = action.product;\r\n            return newState;\r\n        case(ACTIONS.UPDATE_PRODUCT_RECEIVED):\r\n            return newState;\r\n        case(ACTIONS.UPDATE_PRODUCT_REQUEST):\r\n            console.log(\"received updatedProduct\", action.product);\r\n            newState.product = action.product;\r\n            return newState;\r\n        case(ACTIONS.DELETE_PRODUCT_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.DELETE_PRODUCT_RECEIVED):\r\n            newState.product = action.product;\r\n            return newState;\r\n        default:\r\n            return prevState;\r\n    }\r\n\r\n}","import { IErrorAction } from \"../actions/errorAction\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\n\r\nconst initialState : IErrorAction = {\r\n    type: \"\",\r\n    error: null\r\n}\r\n\r\nexport default function errorReducer(prevState = initialState, action: IErrorAction): IErrorAction {\r\n    const { type, error } = action;\r\n    // Must make sure to clear all errors before redirecting, otherwise errors will persist even at the next component\r\n    if (type === ACTIONS.CLEAR_ERROR) {\r\n        return initialState;\r\n    } else if (error) {\r\n        console.log(\"error received in errorReducer:\", error);\r\n        //When you go to a new component, you want the previous errors to disappear\r\n        return {\r\n            type: type,\r\n            error: action.error\r\n        }         \r\n    }\r\n\r\n    //For any start and finished actions that don't have errors we return the current state.\r\n    return prevState; \r\n}","import { cloneDeep } from \"lodash\";\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../../contexts/AuthContext\";\r\nimport { AuthVM } from \"../../models/AuthVM\";\r\nimport { ACTIONS } from \"../actionEnums\";\r\nimport { IAuthAction } from \"../thunks/authThunk\";\r\n\r\nconst initialState : IAuthAction = {\r\n    type: \"\",\r\n    identityUser: undefined,\r\n    message: \"Initial Message\",\r\n    httpMessage: \"Initial Response Message\",   \r\n    authVM: undefined     \r\n}\r\n\r\nexport default function authReducer(prevState = initialState, action: IAuthAction): IAuthAction {\r\n\r\n    let newState: IAuthAction = cloneDeep(prevState);\r\n    \r\n    newState.authVM = cloneDeep(action.authVM);\r\n    newState.type = action.type;\r\n    newState.message = `${action.message} ${(new Date())}`;\r\n    newState.httpMessage = `${action.httpMessage} + ${new Date()}`;\r\n \r\n    switch(action.type) {    \r\n        case(ACTIONS.LOGIN_REQUEST):\r\n            return newState;\r\n        case(ACTIONS.LOGIN_SUCCESS): \r\n            localStorage.setItem(\"authVM\", JSON.stringify(action.authVM)); \r\n            return newState;\r\n        case(ACTIONS.LOGIN_FAILED):\r\n            return newState;\r\n        case(ACTIONS.LOGOUT):\r\n            localStorage.removeItem(\"authVM\");\r\n            newState.message = ACTIONS.LOGOUT_SUCCESS;\r\n            return newState;\r\n        default:\r\n            return prevState;            \r\n    }\r\n\r\n}","import { combineReducers } from 'redux';\r\nimport discountSchemeReducer from './reducers/discountSchemeReducer';\r\nimport bidReducer from './reducers/bidReducer';\r\nimport productReducer from './reducers/productReducer';\r\nimport errorReducer from './reducers/errorReducer';\r\nimport authReducer from './reducers/authReducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({    \r\n    discountSchemeReducer,\r\n    bidReducer,\r\n    productReducer,\r\n    authReducer,\r\n    errorReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { rootReducer } from './store/rootReducer';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nReactDOM.render(\r\n  <Provider store={store} > \r\n    <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n  </Provider> , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}